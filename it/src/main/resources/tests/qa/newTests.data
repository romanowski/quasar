{ "name": "select aliased field sorted by original name", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_2_6": "ignoreFieldOrder", "mongodb_3_0": "ignoreFieldOrder", "mongodb_3_2": "ignoreFieldOrder", "mongodb_3_4": "ignoreFieldOrder", "mongodb_read_only": "ignoreFieldOrder", "postgresql": "pending" }, "data": "zips.data", "query": "SELECT state AS `ResultAlias`, COUNT(*) as cnt FROM zips GROUP BY state ORDER BY state", "predicate": "initial", "expected": [{ "ResultAlias": "AK", "cnt": 195 }, { "ResultAlias": "AL", "cnt": 567 }, { "ResultAlias": "AR", "cnt": 578 }, { "ResultAlias": "AZ", "cnt": 270 }, { "ResultAlias": "CA", "cnt": 1516 }, { "ResultAlias": "CO", "cnt": 414 }, { "ResultAlias": "CT", "cnt": 263 }, { "ResultAlias": "DC", "cnt": 24 }, { "ResultAlias": "DE", "cnt": 53 }, { "ResultAlias": "FL", "cnt": 804 }]}
{ "name": "basic analytic query", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "postgresql": "pending" }, "data": "zips.data", "query": "SELECT state, COUNT(*) AS count, SUM(pop) AS sum, AVG(pop) AS avg, MIN(pop) AS min, MAX(pop) AS max FROM zips WHERE pop > 10000 GROUP BY state ORDER BY max DESC, state OFFSET 1 LIMIT 10", "predicate": "exactly", "expected": [ { "state": "NY", "count": 489, "sum": 14914135, "avg": 30499.25357873, "min": 10008, "max": 111396 }, { "state": "CA", "count": 849, "sum": 27845412, "avg": 32797.89399293, "min": 10009, "max": 99568 }, { "state": "MI", "count": 269, "sum": 7262672, "avg": 26998.78066914, "min": 10057, "max": 84712 }, { "state": "PA", "count": 365, "sum": 8664634, "avg": 23738.72328767, "min": 10021, "max": 80454 }, { "state": "TX", "count": 571, "sum": 13803255, "avg": 24173.82661996, "min": 10019, "max": 79463 }, { "state": "MD", "count": 140, "sum": 4001087, "avg": 28579.19285714, "min": 10228, "max": 76002 }, { "state": "FL", "count": 472, "sum": 11136926, "avg": 23595.18220338, "min": 10004, "max": 73194 }, { "state": "WV", "count": 36, "sum": 766999, "avg": 21305.52777777, "min": 10091, "max": 70185 }, { "state": "NJ", "count": 280, "sum": 6520399, "avg": 23287.13928571, "min": 10088, "max": 69646 }, { "state": "NC", "count": 209, "sum": 4854625, "avg": 23227.87081339, "min": 10049, "max": 69179 }]}
{ "name": "population of Boulder-like towns", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select city, state, sum(pop) as totalPop from zips where city like \"BOULDER%\" group by city, state", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "city": "BOULDER", "state": "CO", "totalPop": 108968 }, { "city": "BOULDER", "state": "MT", "totalPop": 1737 }, { "city": "BOULDER", "state": "UT", "totalPop": 131 }, { "city": "BOULDER", "state": "WY", "totalPop": 112 }, { "city": "BOULDER CITY", "state": "NV", "totalPop": 12920 }, { "city": "BOULDER CREEK", "state": "CA", "totalPop": 9434 }, { "city": "BOULDER JUNCTION", "state": "WI", "totalPop": 563 }]}
{ "name": "population of Boulder", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select sum(pop) as Population from zips where city=\"BOULDER\" and state=\"CO\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "Population": 108968 }]}
{ "name": "four different kinds of CASE expressions (switch/match, with and without ELSE)", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "couchbase": "pending", "marklogic_json": "pending", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "zips.data", "query": "select distinct case pop when 0 then \"nobody\" when 1 then \"one\" when 2 then \"a couple\" when 3 then \"a few\" else \"more\" end as cardinal, case pop when 1 then 0 when 10 then 1 end as power, case when pop % 2 = 0 then \"even\" when pop = 1 or pop = 9 then \"odd\" else \"prime\" end as parity, case when pop > 5 then pop - 5 end as grade from zips where pop <= 10 order by pop", "predicate": "exactly", "expected": [ { "cardinal": "nobody", "power": null, "parity": "even" , "grade": null }, { "cardinal": "one", "power": 0 , "parity": "odd" , "grade": null }, { "cardinal": "a couple", "power": null, "parity": "even" , "grade": null }, { "cardinal": "a few", "power": null, "parity": "prime", "grade": null }, { "cardinal": "more", "power": null, "parity": "even" , "grade": null }, { "cardinal": "more", "power": null, "parity": "prime", "grade": null }, { "cardinal": "more", "power": null, "parity": "even" , "grade": 1 }, { "cardinal": "more", "power": null, "parity": "prime", "grade": 2 }, { "cardinal": "more", "power": null, "parity": "even" , "grade": 3 }, { "cardinal": "more", "power": null, "parity": "odd" , "grade": 4 }, { "cardinal": "more", "power": 1 , "parity": "even" , "grade": 5 } ]}
{ "name": "combine case (3-arg expr) with group by", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "data": "zips.data", "query": "select distinct state as abbr, count(pop) as quantity, case when state = \"CO\" then 1 when state = \"WA\" then 2 when state = \"PA\" then 3 when state = \"VA\" then 4 else 100 end as funnel from zips group by state order by funnel, state", "predicate": "initial", "expected": [{ "abbr": "CO", "quantity": 414, "funnel": 1 }, { "abbr": "WA", "quantity": 484, "funnel": 2 }, { "abbr": "PA", "quantity": 1458, "funnel": 3 }, { "abbr": "VA", "quantity": 816, "funnel": 4 }, { "abbr": "AK", "quantity": 195, "funnel": 100 }]}
{ "name": "cities with largest individual zip codes", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "NB": "Skipped for all connectors due to reduce/sort ordering bug. Bug is fixed on @sellout's new mongo branch, but the fix breaks old mongo. This is tricky because the sort key does not appear in the result. The result can be verified by running a similar query with `select city, pop`.", "data": "zips.data", "query": "select distinct city from zips order by pop desc limit 5", "predicate": "exactly", "expected": ["CHICAGO", "BROOKLYN", "NEW YORK", "BELL GARDENS", "LOS ANGELES"]}
{ "name": "top 5 cities by total population", "backends": { "couchbase": "ignoreFieldOrder", "mimir": "timeout", "mongodb_2_6": "ignoreFieldOrder", "mongodb_3_0": "ignoreFieldOrder", "mongodb_3_2": "ignoreFieldOrder", "mongodb_3_4": "ignoreFieldOrder", "mongodb_read_only": "ignoreFieldOrder", "postgresql": "pending" }, "data": "zips.data", "query": "select city, state, sum(pop) as population from zips group by city, state order by population desc limit 5", "predicate": "exactly", "expected": [ { "city": "CHICAGO", "state": "IL", "population": 2452177 }, { "city": "BROOKLYN", "state": "NY", "population": 2300504 }, { "city": "LOS ANGELES", "state": "CA", "population": 2102295 }, { "city": "HOUSTON", "state": "TX", "population": 2095918 }, { "city": "PHILADELPHIA", "state": "PA", "population": 1610956 }]}
{ "name": "variable with a non-trivial value", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "days.data", "variables": { "start": "DATE(\"2014-08-20\")", "end": "TIMESTAMP(\"2014-08-21T00:00:00Z\") + INTERVAL(\"PT24H\")" }, "query": "select day from days where ts >= start_of_day(:start) and ts <= :end", "predicate": "exactly", "expected": ["Wednesday", "Thursday"]}
{ "name": "concat known array structure", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "largeZips.data", "query": "select [ city, pop ] as cp from largeZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "cp": ["CUSHMAN", 36963] }, { "cp": ["CHICOPEE", 31495] }, { "cp": ["HOLYOKE", 43704] }, { "cp": ["FLORENCE", 27939] }, { "cp": ["MONTGOMERY", 40117] }, { "cp": ["WEST SPRINGFIELD", 27537] }, { "cp": ["SPRINGFIELD", 25519] }, { "cp": ["SPRINGFIELD", 32635] }, { "cp": ["PITTSFIELD", 50655] }, { "cp": ["FITCHBURG", 41194] }]}
{ "name": "concat unknown with literal array", "backends": { "marklogic_json": "ignoreFieldOrder", "mimir": "skip", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "ignoreFieldOrder", "mongodb_3_4": "ignoreFieldOrder", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "largeZips.data", "query": "select loc || [1, 2] as arr, city from largeZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "arr": [-72.51565, 42.377017, 1, 2], "city": "CUSHMAN" }, { "arr": [-72.576142, 42.176443, 1, 2], "city": "CHICOPEE" }, { "arr": [-72.626193, 42.202007, 1, 2], "city": "HOLYOKE" }, { "arr": [-72.654245, 42.324662, 1, 2], "city": "FLORENCE" }, { "arr": [-72.754318, 42.129484, 1, 2], "city": "MONTGOMERY" }, { "arr": [-72.641109, 42.115066, 1, 2], "city": "WEST SPRINGFIELD" }, { "arr": [-72.558432, 42.085314, 1, 2], "city": "SPRINGFIELD" }, { "arr": [-72.554349, 42.114455, 1, 2], "city": "SPRINGFIELD" }, { "arr": [-73.247088, 42.453086, 1, 2], "city": "PITTSFIELD" }, { "arr": [-71.803133, 42.579563, 1, 2], "city": "FITCHBURG" }]}
{ "name": "concat array with unknown structure", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "largeZips.data", "query": "select city, state, loc || [ pop ] as lp from largeZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "CUSHMAN", "state": "MA", "lp": [ -72.51565, 42.377017, 36963] }, { "city": "CHICOPEE", "state": "MA", "lp": [-72.576142, 42.176443, 31495] }, { "city": "HOLYOKE", "state": "MA", "lp": [-72.626193, 42.202007, 43704] }, { "city": "FLORENCE", "state": "MA", "lp": [-72.654245, 42.324662, 27939] }, { "city": "MONTGOMERY", "state": "MA", "lp": [-72.754318, 42.129484, 40117] }, { "city": "WEST SPRINGFIELD", "state": "MA", "lp": [-72.641109, 42.115066, 27537] }, { "city": "SPRINGFIELD", "state": "MA", "lp": [-72.558432, 42.085314, 25519] }, { "city": "SPRINGFIELD", "state": "MA", "lp": [-72.554349, 42.114455, 32635] }, { "city": "PITTSFIELD", "state": "MA", "lp": [-73.247088, 42.453086, 50655] }, { "city": "FITCHBURG", "state": "MA", "lp": [-71.803133, 42.579563, 41194] }]}
{ "name": "concat BETWEEN with other fields", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "smallZips.data", "query": "select city, pop, pop between 1000 and 10000 as midsized from smallZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "AGAWAM", "pop": 15338, "midsized": false }, { "city": "CUSHMAN", "pop": 36963, "midsized": false }, { "city": "BARRE", "pop": 4546, "midsized": true }, { "city": "BELCHERTOWN", "pop": 10579, "midsized": false }, { "city": "BLANDFORD", "pop": 1240, "midsized": true }, { "city": "BRIMFIELD", "pop": 3706, "midsized": true }, { "city": "CHESTER", "pop": 1688, "midsized": true }, { "city": "CHESTERFIELD", "pop": 177, "midsized": false }, { "city": "CHICOPEE", "pop": 23396, "midsized": false }, { "city": "CHICOPEE", "pop": 31495, "midsized": false }]}
{ "name": "concat field with constant array", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "largeZips.data", "query": "select array_concat(make_array(pop), array_concat(make_array(1), make_array(2))) as arr from largeZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "arr": [36963, 1.0, 2.0] }, { "arr": [31495, 1.0, 2.0] }, { "arr": [43704, 1.0, 2.0] }, { "arr": [27939, 1.0, 2.0] }, { "arr": [40117, 1.0, 2.0] }, { "arr": [27537, 1.0, 2.0] }, { "arr": [25519, 1.0, 2.0] }, { "arr": [32635, 1.0, 2.0] }, { "arr": [50655, 1.0, 2.0] }, { "arr": [41194, 1.0, 2.0] }]}
{ "name": "constant and a grouped value", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "zips.data", "variables": { "state": "\"CO\"" }, "query": "select :state as state, count(*) as `count` from zips where state = :state", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "state": "CO", "count": 414 }]}
{ "name": "convert values from strings", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "smallZips.data", "query": "select integer(`_id`) as intId, decimal(`_id`) as decId from smallZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "intId": 1001, "decId": 1001.0 }, { "intId": 1002, "decId": 1002.0 }, { "intId": 1005, "decId": 1005.0 }, { "intId": 1007, "decId": 1007.0 }, { "intId": 1008, "decId": 1008.0 }, { "intId": 1010, "decId": 1010.0 }, { "intId": 1011, "decId": 1011.0 }, { "intId": 1012, "decId": 1012.0 }, { "intId": 1013, "decId": 1013.0 }, { "intId": 1020, "decId": 1020.0 }]}
{ "name": "convert values to/from strings", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "zips.data", "query": "select integer(`_id`) as intId, decimal(`_id`) as decId, to_string(pop) as popStr, to_string(loc[0]) as locStr, to_string(length(city) < 9) as boolStr from zips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "intId": 1001, "decId": 1001.0, "popStr": "15338", "locStr": "-72.622739", "boolStr": "true" }, { "intId": 1002, "decId": 1002.0, "popStr": "36963", "locStr": "-72.51565", "boolStr": "true" }, { "intId": 1005, "decId": 1005.0, "popStr": "4546", "locStr": "-72.108354", "boolStr": "true" }, { "intId": 1007, "decId": 1007.0, "popStr": "10579", "locStr": "-72.410953", "boolStr": "false" }, { "intId": 1008, "decId": 1008.0, "popStr": "1240", "locStr": "-72.936114", "boolStr": "false" }, { "intId": 1010, "decId": 1010.0, "popStr": "3706", "locStr": "-72.188455", "boolStr": "false" }, { "intId": 1011, "decId": 1011.0, "popStr": "1688", "locStr": "-72.988761", "boolStr": "true" }, { "intId": 1012, "decId": 1012.0, "popStr": "177", "locStr": "-72.833309", "boolStr": "false" }, { "intId": 1013, "decId": 1013.0, "popStr": "23396", "locStr": "-72.607962", "boolStr": "true" }, { "intId": 1020, "decId": 1020.0, "popStr": "31495", "locStr": "-72.576142", "boolStr": "true" }]}
{ "name": "left key join (Couchbase)", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "skip", "mongodb_2_6": "skip", "mongodb_3_0": "skip", "mongodb_3_2": "skip", "mongodb_3_4": "skip", "mongodb_read_only": "skip", "postgresql": "skip", "spark_hdfs": "skip", "spark_local": "timeout" }, "data": [], "query": "select meta(brewery).id as brewery_meta_id, brewery.name as brewery_name, beer.name as beer_name, beer.brewery_id as beer_brewery_id from `brewery` as brewery join `beer` as beer on meta(brewery).id = beer.brewery_id where beer.name = \"Pale\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "beer_brewery_id": "coastal_fog_brewing", "beer_name": "Pale", "brewery_meta_id": "coastal_fog_brewing", "brewery_name": "Coastal Fog Brewing" }, { "beer_brewery_id": "glacial_lakes_brewing", "beer_name": "Pale", "brewery_meta_id": "glacial_lakes_brewing", "brewery_name": "Glacial Lakes Brewing" }, { "beer_brewery_id": "left_coast_brewing", "beer_name": "Pale", "brewery_meta_id": "left_coast_brewing", "brewery_name": "Left Coast Brewing" }, { "beer_brewery_id": "pyramid_alehouse_brewery_and_restaurant_berkeley", "beer_name": "Pale", "brewery_meta_id": "pyramid_alehouse_brewery_and_restaurant_berkeley", "brewery_name": "Pyramid Alehouse, Brewery and Restaurant - Berkeley" }, { "beer_brewery_id": "red_kettle_brewing", "beer_name": "Pale", "brewery_meta_id": "red_kettle_brewing", "brewery_name": "Red Kettle Brewing" }, { "beer_brewery_id": "triple_rock_brewery", "beer_name": "Pale", "brewery_meta_id": "triple_rock_brewery", "brewery_name": "Triple Rock Brewery" } ]}
{ "name": "left key join with multiple fields selected (Couchbase)", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "skip", "mongodb_2_6": "skip", "mongodb_3_0": "skip", "mongodb_3_2": "skip", "mongodb_3_4": "skip", "mongodb_read_only": "skip", "postgresql": "skip", "spark_hdfs": "skip", "spark_local": "timeout" }, "data": [], "query": "SELECT META(brewery).id AS brewery_meta_id, brewery.name AS brewery_name, beer.name AS beer_name, beer.brewery_id AS beer_brewery_id, beer.category AS beer_category FROM `brewery` AS brewery JOIN `beer` AS beer ON META(brewery).id = beer.brewery_id WHERE beer.category = \"North American Ale\"", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "brewery_meta_id": "21st_amendment_brewery_cafe", "brewery_name": "21st Amendment Brewery Cafe", "beer_brewery_id": "21st_amendment_brewery_cafe", "beer_name": "21A IPA", "beer_category": "North American Ale" }, { "brewery_meta_id": "21st_amendment_brewery_cafe", "brewery_name": "21st Amendment Brewery Cafe", "beer_brewery_id": "21st_amendment_brewery_cafe", "beer_name": "563 Stout", "beer_category": "North American Ale" } ]}
{ "name": "right key join (Couchbase)", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "skip", "mongodb_2_6": "skip", "mongodb_3_0": "skip", "mongodb_3_2": "skip", "mongodb_3_4": "skip", "mongodb_read_only": "skip", "postgresql": "skip", "spark_hdfs": "skip", "spark_local": "timeout" }, "data": [], "query": "select meta(brewery).id as brewery_meta_id, brewery.name as brewery_name, beer.name as beer_name, beer.brewery_id as beer_brewery_id from `beer` as beer join `brewery` as brewery on beer.brewery_id = meta(brewery).id where beer.name = \"Pale\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "beer_brewery_id": "coastal_fog_brewing", "beer_name": "Pale", "brewery_meta_id": "coastal_fog_brewing", "brewery_name": "Coastal Fog Brewing" }, { "beer_brewery_id": "glacial_lakes_brewing", "beer_name": "Pale", "brewery_meta_id": "glacial_lakes_brewing", "brewery_name": "Glacial Lakes Brewing" }, { "beer_brewery_id": "left_coast_brewing", "beer_name": "Pale", "brewery_meta_id": "left_coast_brewing", "brewery_name": "Left Coast Brewing" }, { "beer_brewery_id": "pyramid_alehouse_brewery_and_restaurant_berkeley", "beer_name": "Pale", "brewery_meta_id": "pyramid_alehouse_brewery_and_restaurant_berkeley", "brewery_name": "Pyramid Alehouse, Brewery and Restaurant - Berkeley" }, { "beer_brewery_id": "red_kettle_brewing", "beer_name": "Pale", "brewery_meta_id": "red_kettle_brewing", "brewery_name": "Red Kettle Brewing" }, { "beer_brewery_id": "triple_rock_brewery", "beer_name": "Pale", "brewery_meta_id": "triple_rock_brewery", "brewery_name": "Triple Rock Brewery" } ]}
{ "name": "count distinct", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "olympics.data", "query": "select count(distinct sport) as cnt from olympics", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "cnt": 7 }]}
{ "name": "count distinct *", "backends": { "mimir": "skip", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "olympics.data", "query": "select count(distinct *) as cnt from olympics", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "cnt": 2304 }]}
{ "name": "delete", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "zips.data", "query": "delete from zips where pop < 100000", "predicate": "exactly", "ignoreResultOrder": true, "ignoredFields": ["_id"], "expected": [ { "city": "NEW YORK", "loc": [-73.958805, 40.768476], "pop": 106564, "state": "NY" }, { "city": "NEW YORK", "loc": [-73.968312, 40.797466], "pop": 100027, "state": "NY" }, { "city": "BROOKLYN", "loc": [-73.956985, 40.646694], "pop": 111396, "state": "NY" }, { "city": "CHICAGO", "loc": [-87.7157, 41.849015], "pop": 112047, "state": "IL" }]}
{ "name": "select reduction from nested select", "backends": { "mimir": "skip", "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "mongodb_read_only": "pending", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "postgresql": "pending" }, "data": "patients.data", "query": "SELECT AVG(cnt) as measure, state as category FROM (SELECT COUNT(*) as cnt, state, gender FROM patients WHERE codes[*].desc LIKE \"%flu%\" GROUP BY state, gender ORDER BY COUNT(*) DESC) as meh", "predicate": "initial", "expected": [{ "measure": 1.238095238095, "category": "NE" }, { "measure": 1.238095238095, "category": "MS" }, { "measure": 1.238095238095, "category": "AL" }, { "measure": 1.238095238095, "category": "NY" }, { "measure": 1.238095238095, "category": "AZ" }, { "measure": 1.238095238095, "category": "SC" }, { "measure": 1.238095238095, "category": "IA" }, { "measure": 1.238095238095, "category": "TX" }, { "measure": 1.238095238095, "category": "IN" }, { "measure": 1.238095238095, "category": "RI" }]}
{ "name": "time series aggregation", "backends": { "couchbase": "pending", "mimir": "timeout", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "data": "smalltimeseries.data", "query": " SELECT SUM(value) AS measure, timestamp(dt) AS dimension, sensor AS series FROM smalltimeseries GROUP BY sensor, dt ORDER BY sensor ASC, dt ASC", "NB": "The query is ordered, but not uniquely, so we have to use containsExactly instead of equalsExactly.", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "measure": 62, "dimension": { "$timestamp": "2017-05-15T16:54:29.615Z" }, "series": "S0" }, { "measure": 54, "dimension": { "$timestamp": "2017-05-17T16:54:29.615Z" }, "series": "S0" }, { "measure": 51, "dimension": { "$timestamp": "2017-05-11T16:54:29.615Z" }, "series": "S0" }, { "measure": 59, "dimension": { "$timestamp": "2017-05-16T16:54:29.615Z" }, "series": "S0" }, { "measure": 54, "dimension": { "$timestamp": "2017-05-12T16:54:29.615Z" }, "series": "S0" }, { "measure": 171, "dimension": { "$timestamp": "2017-05-09T16:54:29.615Z" }, "series": "S0" }, { "measure": 61, "dimension": { "$timestamp": "2017-05-14T16:54:29.615Z" }, "series": "S0" }, { "measure": 58, "dimension": { "$timestamp": "2017-05-18T16:54:29.615Z" }, "series": "S0" }, { "measure": 97, "dimension": { "$timestamp": "2017-05-10T16:54:29.615Z" }, "series": "S0" }, { "measure": 57, "dimension": { "$timestamp": "2017-05-13T16:54:29.615Z" }, "series": "S0" }, { "measure": 44, "dimension": { "$timestamp": "2017-05-15T16:54:29.615Z" }, "series": "S1" }, { "measure": 45, "dimension": { "$timestamp": "2017-05-17T16:54:29.615Z" }, "series": "S1" }, { "measure": 43, "dimension": { "$timestamp": "2017-05-14T16:54:29.615Z" }, "series": "S1" }, { "measure": 42, "dimension": { "$timestamp": "2017-05-12T16:54:29.615Z" }, "series": "S1" }, { "measure": 44, "dimension": { "$timestamp": "2017-05-10T16:54:29.615Z" }, "series": "S1" }, { "measure": 45, "dimension": { "$timestamp": "2017-05-09T16:54:29.615Z" }, "series": "S1" }, { "measure": 46, "dimension": { "$timestamp": "2017-05-16T16:54:29.615Z" }, "series": "S1" }, { "measure": 46, "dimension": { "$timestamp": "2017-05-18T16:54:29.615Z" }, "series": "S1" }, { "measure": 40, "dimension": { "$timestamp": "2017-05-11T16:54:29.615Z" }, "series": "S1" }, { "measure": 47, "dimension": { "$timestamp": "2017-05-13T16:54:29.615Z" }, "series": "S1" }, { "measure": 55, "dimension": { "$timestamp": "2017-05-09T16:54:29.615Z" }, "series": "S2" }, { "measure": 50, "dimension": { "$timestamp": "2017-05-15T16:54:29.615Z" }, "series": "S2" }, { "measure": 52, "dimension": { "$timestamp": "2017-05-13T16:54:29.615Z" }, "series": "S2" }, { "measure": 43, "dimension": { "$timestamp": "2017-05-17T16:54:29.615Z" }, "series": "S2" }, { "measure": 44, "dimension": { "$timestamp": "2017-05-18T16:54:29.615Z" }, "series": "S2" }, { "measure": 53, "dimension": { "$timestamp": "2017-05-11T16:54:29.615Z" }, "series": "S2" }, { "measure": 56, "dimension": { "$timestamp": "2017-05-10T16:54:29.615Z" }, "series": "S2" }, { "measure": 47, "dimension": { "$timestamp": "2017-05-16T16:54:29.615Z" }, "series": "S2" }, { "measure": 55, "dimension": { "$timestamp": "2017-05-14T16:54:29.615Z" }, "series": "S2" }, { "measure": 48, "dimension": { "$timestamp": "2017-05-12T16:54:29.615Z" }, "series": "S2" } ]}
{ "name": "merge differently-nested flattens", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "postgresql": "pending" }, "data": "user_comments.data", "query": "select profile from user_comments where ( userId LIKE \"%Dr%\" OR profile.name LIKE \"%Dr%\" OR profile.age LIKE \"%Dr%\" OR profile.title LIKE \"%Dr%\" OR comments[*].id LIKE \"%Dr%\" OR comments[*].text LIKE \"%Dr%\" OR comments[*].replyTo[*] LIKE \"%Dr%\" OR comments[*].`time` LIKE \"%Dr%\")", "NB": "`exactly` with `ignoreResultOrder` has a bug that gets confused on duplicate results (#732), so we currently don’t ignore the result order.", "predicate": "exactly", "expected": [{ "name": "Mary Jane", "age": 29, "title": "Dr" }, { "name": "Mary Jane", "age": 29, "title": "Dr" }, { "name": "Mary Jane", "age": 29, "title": "Dr" }, { "name": "Mary Jane", "age": 29, "title": "Dr" }]}
{ "name": "distinct *", "backends": { "mimir": "skip", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "cities.data", "query": "select distinct * from cities where city = \"BOSTON\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "_id": "02108", "city": "BOSTON" }, { "_id": "02109", "city": "BOSTON" }, { "_id": "02110", "city": "BOSTON" }, { "_id": "02111", "city": "BOSTON" }, { "_id": "02113", "city": "BOSTON" }, { "_id": "02114", "city": "BOSTON" }, { "_id": "02115", "city": "BOSTON" }, { "_id": "02116", "city": "BOSTON" }, { "_id": "02199", "city": "BOSTON" }, { "_id": "02210", "city": "BOSTON" }, { "_id": "02215", "city": "BOSTON" }, { "_id": "14025", "city": "BOSTON" }, { "_id": "15135", "city": "BOSTON" }, { "_id": "22713", "city": "BOSTON" }, { "_id": "31626", "city": "BOSTON" }, { "_id": "40107", "city": "BOSTON" }, { "_id": "75570", "city": "BOSTON" } ]}
{ "name": "divide", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "mimir": "timeout", "spark_local": "pending", "spark_hdfs": "pending" }, "data": "divide.data", "query": "select nr, val1 / val2 as d from divide", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "nr": 1, "d": 3.0 }, { "nr": 2, "d": 2.0 }, { "nr": 3, "d": 0.5 }, { "nr": 4, "d": 0.25 }, { "nr": 5, "d": -3.0 }, { "nr": 6, "d": -2.0 }, { "nr": 7, "d": -4.0 }, { "nr": 8, "d": -0.5 }, { "nr": 9, "d": -0.25 }, { "nr": 10 }, { "nr": 11 }, { "nr": 12 } ]}
{ "name": "divide by 0", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "mimir": "timeout", "spark_local": "pending", "spark_hdfs": "pending" }, "data": "divide.data", "query": "select nr, val1 / 0 as d from divide", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "nr": 1 }, { "nr": 2 }, { "nr": 3 }, { "nr": 4 }, { "nr": 5 }, { "nr": 6 }, { "nr": 7 }, { "nr": 8 }, { "nr": 9 }, { "nr": 10 }, { "nr": 11 }, { "nr": 12 } ]}
{ "name": "flatten a flattened field", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "slamengine_commits.data", "query": "select parents[*]{*} from slamengine_commits", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "https://api.github.com/repos/slamdata/slamengine/commits/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "https://github.com/slamdata/slamengine/commit/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "18164870e8803e5885a88f8dfd53b82c80721503", "https://api.github.com/repos/slamdata/slamengine/commits/18164870e8803e5885a88f8dfd53b82c80721503", "https://github.com/slamdata/slamengine/commit/18164870e8803e5885a88f8dfd53b82c80721503", "b29d8f254e5df2c4d1792f077625924cd1fde2db", "https://api.github.com/repos/slamdata/slamengine/commits/b29d8f254e5df2c4d1792f077625924cd1fde2db", "https://github.com/slamdata/slamengine/commit/b29d8f254e5df2c4d1792f077625924cd1fde2db", "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "https://api.github.com/repos/slamdata/slamengine/commits/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "https://github.com/slamdata/slamengine/commit/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6"]}
{ "name": "double flatten with intervening field", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "nested.data", "query": "select topObj{*}.botObj{*} from nested", "predicate": "exactly", "ignoreResultOrder": true, "expected": ["m", "n", "o"]}
{ "name": "reduced expressions which trigger bad field ordering in MongoDB (#598)", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select count(*)/1000, 0 from zips limit 5", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "0": 29.353, "1": 0 }]}
{ "name": "filter with pipeline using variables in query", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "smallZips.data", "variables": { "cutoff": "1000" }, "query": "select count(*) as cnt from smallZips where pop < :cutoff", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "cnt": 19 }]}
{ "name": "filter with pipeline and JS", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "smallZips.data", "query": "select count(*) as cnt from smallZips where pop < 1000 and length(city) < 8", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "cnt": 7 }]}
{ "name": "filter by JS expression, with only reducing projections", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "largeZips.data", "query": "select max(pop) as max_pop, min(city) as min_city from largeZips where length(city) < 6", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "max_pop": 85710, "min_city": "ABAC" }]}
{ "name": "filter on list complement", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select count(*) as cnt from zips where state not in (\"AZ\", \"CO\")", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{"cnt": 28669}]}
{ "name": "filtered distinct of one field", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "olympics.data", "query": "select distinct discipline from olympics where event like \"%pursuit\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": ["Speed skating", "Biathlon", "Cross Country S"]}
{ "name": "filter on list membership", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select count(*) as cnt from zips where state in (\"AZ\", \"CO\")", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{"cnt": 684}]}
{ "name": "filter on contains", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select * from zips where 43.058514 in loc[_]", "predicate": "exactly", "ignoreFieldOrder": true, "expected": [{ "city": "CANDIA", "state": "NH", "pop": 3557, "_id":"03034", "loc": [-71.304857, 43.058514] }]}
{ "name": "filter on field comparison", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select * from zips where pop < loc[1] order by `_id` limit 10", "predicate": "exactly", "ignoreFieldOrder": true, "expected": [ { "_id": "01338", "city": "BUCKLAND", "loc": [-72.764124, 42.615174], "pop": 16, "state": "MA" }, { "_id": "02163", "city": "CAMBRIDGE", "loc": [-71.141879, 42.364005], "pop": 0, "state": "MA" }, { "_id": "03291", "city": "WEST NOTTINGHAM", "loc": [-71.111006, 43.133971], "pop": 27, "state": "NH" }, { "_id": "04013", "city": "BUSTINS ISLAND", "loc": [-70.042247, 43.79602], "pop": 0, "state": "ME" }, { "_id": "04109", "city": "CUSHING ISLAND", "loc": [-70.202201, 43.674971], "pop": 28, "state": "ME" }, { "_id": "04235", "city": "FRYE", "loc": [-70.565319, 44.599482], "pop": 28, "state": "ME" }, { "_id": "04279", "city": "RUMFORD POINT", "loc": [-70.700276, 44.557104], "pop": 36, "state": "ME" }, { "_id": "04563", "city": "CUSHING", "loc": [-69.272061, 43.986741], "pop": 12, "state": "ME" }, { "_id": "04570", "city": "SQUIRREL ISLAND", "loc": [-69.630974, 43.809031], "pop": 3, "state": "ME" }, { "_id": "04673", "city": "SARGENTVILLE", "loc": [-68.705221, 44.3345], "pop": 43, "state": "ME" }]}
{ "name": "match on ObjectId", "NB": "This test isn’t really valid. This is neither the correct way to represent an OID (there is no generic way to do so), nor should the `_id` field even be in the data. But this is a reasonable placeholder until we actually expose the correct way to do more or less what this intends.", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "days.data", "query": "select day from days where `_id` = oid(\"54b6f430d4c654959e963a62\")", "predicate": "exactly", "ignoreResultOrder": true, "expected": ["Sunday"]}
{ "name": "filter, skip, limit, and count", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select count(*) as cnt from (select * from zips where city like \"BOU%\" offset 15 limit 10) as x", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "cnt": 5 }]}
{ "name": "filter, sort, and limit", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select * from zips where city like \"BOU%\" order by pop limit 10", "predicate": "exactly", "ignoredFields": ["_id"], "ignoreFieldOrder": true, "expected": [ { "city": "BOULDER", "loc": [-109.540105, 42.688146], "pop": 112, "state": "WY" }, { "city": "BOULDER", "loc": [-111.426646, 37.916606], "pop": 131, "state": "UT" }, { "city": "BOUTON", "loc": [ -93.996286, 41.828432], "pop": 552, "state": "IA" }, { "city": "BOULDER JUNCTION","loc": [ -89.632454, 46.111183], "pop": 563, "state": "WI" }, { "city": "BOUCKVILLE", "loc": [ -75.567841, 42.894024], "pop": 650, "state": "NY" }, { "city": "BOULEVARD", "loc": [-116.319982, 32.671934], "pop": 1163, "state": "CA" }, { "city": "BOULDER", "loc": [-112.113757, 46.230647], "pop": 1737, "state": "MT" }, { "city": "BOUTTE", "loc": [ -90.393396, 29.897319], "pop": 2432, "state": "LA" }, { "city": "BOURBON", "loc": [ -86.117438, 41.309785], "pop": 2976, "state": "IN" }, { "city": "BOURBON", "loc": [ -91.22254, 38.172039], "pop": 4456, "state": "MO" }]}
{ "name": "filter with complex query involving not", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "largeZips.data", "query": "select `_id` as zip from largeZips where not (city not like \"BOULD%\" or state != \"CO\" or (pop between 20000 and 40000 and loc[1] != 40.017235))", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "zip": "80301" }, { "zip": "80302" }]}
{ "name": "filter with negated regex selector", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select city, state from zips where city not like \"BOULD%\" and pop = 18174", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "city": "ESCONDIDO", "state": "CA" } ]}
{ "name": "flatten array", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "SELECT loc[*] AS loc FROM zips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "loc" : -72.622739 }, { "loc" : 34.933613 }, { "loc" : -78.504109 }, { "loc" : 34.994081 }, { "loc" : -79.261843 }, { "loc" : 34.588664 } ]}
{ "name": "flatten array on the left with unflattened field", "backends": { "couchbase": "pending", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "zips.data", "query": "SELECT loc[*] as coord, `_id` as zip FROM zips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ {"coord": -72.622739, "zip": "01001"}, {"coord": 42.070206, "zip": "01001"}, {"coord": -72.51565, "zip": "01002"}, {"coord": 42.377017, "zip": "01002"}, {"coord": -72.108354, "zip": "01005"}, {"coord": 42.409698, "zip": "01005"}, {"coord": -72.410953, "zip": "01007"}, {"coord": 42.275103, "zip": "01007"}, {"coord": -72.936114, "zip": "01008"}, {"coord": 42.182949, "zip": "01008"}]}
{ "name": "flatten an object resulting from an array projection", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "slamengine_commits.data", "query": "select parents[0]{*} as parent from slamengine_commits", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "parent": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6" }, { "parent": "https://api.github.com/repos/slamdata/slamengine/commits/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6" }, { "parent": "https://github.com/slamdata/slamengine/commit/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6" }, { "parent": "b29d8f254e5df2c4d1792f077625924cd1fde2db" }, { "parent": "https://api.github.com/repos/slamdata/slamengine/commits/b29d8f254e5df2c4d1792f077625924cd1fde2db" }, { "parent": "https://github.com/slamdata/slamengine/commit/b29d8f254e5df2c4d1792f077625924cd1fde2db" }, { "parent": "166f7337c8fd5db13941abf482de05accb8e9380" }, { "parent": "https://api.github.com/repos/slamdata/slamengine/commits/166f7337c8fd5db13941abf482de05accb8e9380" }, { "parent": "https://github.com/slamdata/slamengine/commit/166f7337c8fd5db13941abf482de05accb8e9380" }, { "parent": "53d2e5684d9403194dff1cc63423c2590038d1c0" }]}
{ "name": "flatten array with unflattened field", "backends": { "couchbase": "pending", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "zips.data", "query": "SELECT `_id` as zip, loc as loc, loc[*] as coord FROM zips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ {"zip": "01001", "loc": [-72.622739, 42.070206], "coord": -72.622739}, {"zip": "01001", "loc": [-72.622739, 42.070206], "coord": 42.070206}, {"zip": "01002", "loc": [-72.51565, 42.377017], "coord": -72.51565}, {"zip": "01002", "loc": [-72.51565, 42.377017], "coord": 42.377017}, {"zip": "01005", "loc": [-72.108354, 42.409698], "coord": -72.108354}, {"zip": "01005", "loc": [-72.108354, 42.409698], "coord": 42.409698}, {"zip": "01007", "loc": [-72.410953, 42.275103], "coord": -72.410953}, {"zip": "01007", "loc": [-72.410953, 42.275103], "coord": 42.275103}, {"zip": "01008", "loc": [-72.936114, 42.182949], "coord": -72.936114}, {"zip": "01008", "loc": [-72.936114, 42.182949], "coord": 42.182949}]}
{ "name": "flatten a grouped object with filter", "backends": { "couchbase": "pending", "marklogic_json": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "data": "slamengine_commits.data", "query": "select distinct commit{*}, count(*) from slamengine_commits where commit{*} like \"http%\" group by committer.login", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/859f02befb7774aae6f7526a5a7d0a083697e4ea", "1": 9 }, { "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/5b54522e340244d618645ace4bd0cbb7edf8bd5b", "1": 6 }, { "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/472dd80e8bdffae0c1bded28a91139941433550d", "1": 6 }, { "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/f1b375cf28abebb32f296119dbb347e5121c3a7a", "1": 9 }, { "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/3e955a22e1f94205c4dfba6aa78a1c94257bb972", "1": 9 }, { "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/696c6ff2556bb1ea6a6de86a03736058e8f6c52a", "1": 9 }, { "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/b812837ee2f72be3aaee582b42e3ad901d1f7371", "1": 9 }, { "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/d58e3105e317ccec3c138be709af0a45ef79c66e", "1": 9 }, { "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/3bacb29203d499edc69f7ff2b1f5ea681411eb75", "1": 15 }, { "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/b29d8f254e5df2c4d1792f077625924cd1fde2db", "1": 15 }]}
{ "name": "flatten an object inside a field projection", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "slamengine_commits.data", "query": "select commit.author{*} from slamengine_commits", "predicate": "atLeast", "ignoreResultOrder": true, "expected": ["Greg Pfeil", "greg@technomadic.org", "2015-01-29T15:52:37Z", "Moss Prescott", "moss@theprescotts.com", "2015-01-29T00:23:14Z", "John A. De Goes", "john@degoes.net", "2015-01-26T17:37:40Z"]}
{ "name": "flatten object", "backends": { "couchbase": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "usa_factbook.data", "query": "select geo{*} from usa_factbook", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ {"text":"North America, bordering both the North Atlantic Ocean and the North Pacific Ocean, between Canada and Mexico"}, {"text":"38 00 N, 97 00 W"}, {"text":"North America"}, {"total":"9,826,675 sq km","land":"9,161,966 sq km","water":"664,709 sq km","note":"includes only the 50 states and District of Columbia"}, {"text":"about half the size of Russia; about three-tenths the size of Africa; about half the size of South America (or slightly larger than Brazil); slightly larger than China; more than twice the size of the European Union"}, {"total":"12,034 km","border_countries":"Canada 8,893 km (including 2,477 km with Alaska), Mexico 3,141 km","note":"US Naval Base at Guantanamo Bay, Cuba is leased by the US and is part of Cuba; the base boundary is 28 km"}, {"text":"19,924 km"}, {"territorial_sea":"12 nm","contiguous_zone":"24 nm","exclusive_economic_zone":"200 nm","continental_shelf":"not specified"}, {"text":"mostly temperate, but tropical in Hawaii and Florida, arctic in Alaska, semiarid in the great plains west of the Mississippi River, and arid in the Great Basin of the southwest; low winter temperatures in the northwest are ameliorated occasionally in January and February by warm chinook winds from the eastern slopes of the Rocky Mountains"}, {"text":"vast central plain, mountains in west, hills and low mountains in east; rugged mountains and broad river valleys in Alaska; rugged, volcanic topography in Hawaii"}, {"lowest_point":"Death Valley -86 m","highest_point":"Mount McKinley (Denali) 6,194 m (highest point in North America)","note":"the peak of Mauna Kea (4,207 m above sea level) on the island of Hawaii rises about 10,200 m above the Pacific Ocean floor; by this measurement, it is the world's tallest mountain - higher than Mount Everest (8,850 m), which is recognized as the tallest mountain above sea level"}, {"text":"coal, copper, lead, molybdenum, phosphates, rare earth elements, uranium, bauxite, gold, iron, mercury, nickel, potash, silver, tungsten, zinc, petroleum, natural gas, timber","note":"the US has the world's largest coal reserves with 491 billion short tons accounting for 27% of the world's total"}, {"arable_land":"16.29%","permanent_crops":"0.26%","other":"83.44% (2011)"}, {"text":"266,440 sq km (2007)"}, {"text":"3,069 cu km (2011)"}, {"total":"478.4 cu km/yr (14%/46%/40%)","per_capita":"1,583 cu m/yr (2005)"}, {"text":"tsunamis; volcanoes; earthquake activity around Pacific Basin; hurricanes along the Atlantic and Gulf of Mexico coasts; tornadoes in the Midwest and Southeast; mud slides in California; forest fires in the west; flooding; permafrost in northern Alaska, a major impediment to development","volcanism":"volcanic activity in the Hawaiian Islands, Western Alaska, the Pacific Northwest, and in the Northern Mariana Islands; both Mauna Loa (elev. 4,170 m) in Hawaii and Mount Rainier (elev. 4,392 m) in Washington have been deemed \"Decade Volcanoes\" by the International Association of Volcanology and Chemistry of the Earth's Interior, worthy of study due to their explosive history and close proximity to human populations; Pavlof (elev. 2,519 m) is the most active volcano in Alaska's Aleutian Arc and poses a significant threat to air travel since the area constitutes a major flight path between North America and East Asia; St. Helens (elev. 2,549 m), famous for the devastating 1980 eruption, remains active today; numerous other historically active volcanoes exist, mostly concentrated in the Aleutian arc and Hawaii; they include: in Alaska: Aniakchak, Augustine, Chiginagak, Fourpeaked, Iliamna, Katmai, Kupreanof, Martin, Novarupta, Redoubt, Spurr, Wrangell; in Hawaii: Trident, Ugashik-Peulik, Ukinrek Maars, Veniaminof; in the Northern Mariana Islands: Anatahan; and in the Pacific Northwest: Mount Baker, Mount Hood"}, {"text":"air pollution resulting in acid rain in both the US and Canada; large emitter of carbon dioxide from the burning of fossil fuels; water pollution from runoff of pesticides and fertilizers; limited natural freshwater resources in much of the western part of the country require careful management; desertification"}, {"party_to":"Air Pollution, Air Pollution-Nitrogen Oxides, Antarctic-Environmental Protocol, Antarctic-Marine Living Resources, Antarctic Seals, Antarctic Treaty, Climate Change, Desertification, Endangered Species, Environmental Modification, Marine Dumping, Marine Life Conservation, Ozone Layer Protection, Ship Pollution, Tropical Timber 83, Tropical Timber 94, Wetlands, Whaling","signed_but_not_ratified":"Air Pollution-Persistent Organic Pollutants, Air Pollution-Volatile Organic Compounds, Biodiversity, Climate Change-Kyoto Protocol, Hazardous Wastes"}, {"text":"world's third-largest country by size (after Russia and Canada) and by population (after China and India); Mt. McKinley is highest point in North America and Death Valley the lowest point on the continent"}]}
{ "name": "flatten a single field as an object", "backends": { "mimir": "skip", "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "postgresql": "pending", "spark_local": "pending", "spark_hdfs": "pending" }, "data": "nested_foo.data", "query": "select * from nested_foo where foo{*} = 15", "predicate": "exactly", "ignoreResultOrder": true, "ignoredFields": ["_id"], "ignoreFieldOrder": true, "expected": [{ "foo": { "bar": 15, "baz": ["qx"] }}]}
{ "name": "generated field names", "backends": { "couchbase": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "smallZips.data", "query": "select TO_STRING(city), state || \"S\" from smallZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "0": "NEW SALEM", "1": "MAS" } ]}
{ "name": "explicitly grouped, with only reduced projections, and a filter", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select count(*) as cnt from zips where pop < 5 group by pop", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "cnt": 66 }, { "cnt": 10 }, { "cnt": 9 }, { "cnt": 3 }, { "cnt": 1 }]}
{ "name": "select wildcard with group by", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select * from zips where `_id` like \"8030%\" group by city", "predicate": "exactly", "ignoreResultOrder": true, "ignoredFields": ["_id"], "ignoreFieldOrder": true, "expected": [ { "city": "BOULDER", "loc": [ -105.21426 , 40.049733], "pop": 18174, "state": "CO" }, { "city": "BOULDER", "loc": [ -105.285131, 40.017235], "pop": 29384, "state": "CO" }, { "city": "BOULDER", "loc": [ -105.239178, 39.991381], "pop": 39860, "state": "CO" }, { "city": "BOULDER", "loc": [ -105.277073, 40.037482], "pop": 21550, "state": "CO" } ]}
{ "name": "group by array", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "slamengine_commits.data", "query": "select distinct count(*) as cnt from slamengine_commits group by parents", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "cnt": 3 }, { "cnt": 2 }, { "cnt": 1 }]}
{ "name": "group by a computed value", "backends": { "marklogic_json": "ignoreFieldOrder", "mimir": "skip", "mongodb_2_6": "ignoreFieldOrder", "mongodb_3_0": "ignoreFieldOrder", "mongodb_3_2": "ignoreFieldOrder", "mongodb_3_4": "ignoreFieldOrder", "mongodb_read_only": "ignoreFieldOrder", "postgresql": "pending" }, "data": "zips.data", "query": "select substring(city, 0, 1) as `first`, count(*) as numZips from zips group by substring(city, 0, 1)", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "first": "X", "numZips": 2 }, { "first": "Z", "numZips": 48 }, { "first": "C", "numZips": 2692 }, { "first": "B", "numZips": 2344 }, { "first": "M", "numZips": 2348 }, { "first": "H", "numZips": 1621 }, { "first": "A", "numZips": 1398 }, { "first": "W", "numZips": 1834 }, { "first": "U", "numZips": 165 }, { "first": "T", "numZips": 955 }, { "first": "F", "numZips": 1091 }, { "first": "O", "numZips": 767 }, { "first": "S", "numZips": 2871 }]}
{ "name": "group by flattened field", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "postgresql": "pending", "spark_hdfs": "pending",	"spark_local": "pending" }, "data": "slamengine_commits.data", "query": "select substring(parents[*].sha, 0, 1), count(*) from slamengine_commits group by substring(parents[*].sha, 0, 1)", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "1": 1, "0": "0" }, { "1": 2, "0": "1" }, { "1": 1, "0": "2" }, { "1": 5, "0": "3" }, { "1": 4, "0": "4" }, { "1": 8, "0": "5" }, { "1": 2, "0": "6" }, { "1": 1, "0": "7" }, { "1": 5, "0": "8" }, { "1": 2, "0": "9" }, { "1": 3, "0": "a" }, { "1": 2, "0": "b" }, { "1": 4, "0": "d" }, { "1": 1, "0": "e" }, { "1": 2, "0": "f" }]}
{ "name": "regex on non-string field", "backends": { "mimir": "skip", "marklogic_json": "pending", "postgresql": "pending" }, "data": "zips.data", "query": "select distinct * from zips where pop ~* \"foo\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": []}
{ "name": "select _id as zip", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select `_id` as zip from zips where city = \"BOULDER\" and state = \"CO\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "zip": "80301" }, { "zip": "80302" }, { "zip": "80303" }, { "zip": "80304" } ]}
{ "name": "handle undefined values", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "zips.data", "query": "select foo ?? pop as p, city ?? false as c from zips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "p": 15338.0, "c": "AGAWAM" }, { "p": 36963.0, "c": "CUSHMAN" }, { "p": 4546.0, "c": "BARRE" }, { "p": 10579.0, "c": "BELCHERTOWN" }, { "p": 1240.0, "c": "BLANDFORD" }, { "p": 3706.0, "c": "BRIMFIELD" }, { "p": 1688.0, "c": "CHESTER" }, { "p": 177.0, "c": "CHESTERFIELD" }, { "p": 23396.0, "c": "CHICOPEE" }, { "p": 31495.0, "c": "CHICOPEE" }]}
{ "name": "implicitly grouped, with filtering", "backends": { "marklogic_json": "ignoreFieldOrder", "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select avg(pop) as avg_pop, sum(pop) as tot_pop from zips where city = \"BOULDER\" and state = \"CO\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "avg_pop": 27242.0, "tot_pop": 108968 }]}
{ "name": "filter field “in” a bare value", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select * from zips where state in \"ME\" and pop < 10", "predicate": "exactly", "ignoreResultOrder": true, "ignoredFields": ["_id"], "ignoreFieldOrder": true, "expected": [ { "city": "BUSTINS ISLAND", "loc": [-70.042247, 43.79602 ], "pop": 0, "state": "ME" }, { "city": "SQUIRREL ISLAND", "loc": [-69.630974, 43.809031], "pop": 3, "state": "ME" }]}
{ "name": "perform 3-way inner equi-join", "backends": { "mimir": "skip", "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": ["../extraSmallZips.data", "../smallZips.data", "../zips.data"], "query": "select z1.city, z2.state from `../extraSmallZips` as z1 join `../smallZips` as z2 on z1.`_id` = z2.`_id` join `../zips` as z3 on z2.`_id` = z3.`_id`", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "AGAWAM", "state": "MA" }, { "city": "CUSHMAN", "state": "MA" }, { "city": "BARRE", "state": "MA" }, { "city": "BLANDFORD", "state": "MA" }, { "city": "BRIMFIELD", "state": "MA" }, { "city": "CHESTER", "state": "MA" }, { "city": "WESTOVER AFB", "state": "MA" }, { "city": "CUMMINGTON", "state": "MA" }, { "city": "MOUNT TOM", "state": "MA" }, { "city": "FEEDING HILLS", "state": "MA" }]}
{ "name": "join where the left hand side is constant", "backends": { "mimir": "skip", "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": ["../smallZips.data", "../zips.data"], "query": "select smallZips.city, zips.state from `../smallZips`, `../zips` where smallZips.`_id` = zips.`_id` and \"MA\" = zips.state", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "AGAWAM", "state": "MA" }, { "city": "CUSHMAN", "state": "MA" }]}
{ "name": "simple join written in 'cross join' form (must be optimized to an inner join or else the join explodes, taking several minutes to complete)", "backends": { "mimir": "skip", "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": ["../smallZips.data", "../zips.data"], "query": "select smallZips.city, zips.state from `../smallZips`, `../zips` where smallZips.`_id` = zips.`_id`", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "AGAWAM", "state": "MA" }, { "city": "CUSHMAN", "state": "MA" }]}
{ "name": "cross join with conditions that must be pushed ahead of the join (or else the join explodes, taking several minutes to complete)", "backends": { "couchbase": "skip", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#1587: Disabled in couchbase due to lack of general join.", "data": ["../largeZips.data", "../zips.data"], "query": "select a.city as a, b.city as b, b.pop - a.pop as diff from `../zips` as a, `../largeZips` as b where a.`_id` like \"80301\" and b.`_id` like \"95928\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "a": "BOULDER", "b": "CHICO", "diff": 9278 }]}
{ "name": "count grouped joined tables", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "NB": "#2121: Disabled in all qscript-based connectors due to possible qscript bug.", "data": ["../slamengine_commits.data", "../slamengine_commits_dup.data"], "query": "SELECT p.author.login, COUNT(*) as count FROM `../slamengine_commits` as p INNER JOIN `../slamengine_commits_dup` as c ON p.sha = c.sha GROUP BY p.author.login", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "login": "mossprescott", "count": 15 }, { "login": "sellout" , "count": 9 }, { "login": "jdegoes" , "count": 6 }]}
{ "name": "perform inner equi-join", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": ["../smallZips.data", "../zips.data"], "query": "select smallZips.city, zips.state from `../smallZips` join `../zips` on smallZips.`_id` = zips.`_id`", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{"city": "AGAWAM", "state": "MA"}, {"city": "CUSHMAN", "state": "MA"}, {"city": "BARRE", "state": "MA"}, {"city": "BELCHERTOWN", "state": "MA"}, {"city": "BLANDFORD", "state": "MA"}, {"city": "BRIMFIELD", "state": "MA"}, {"city": "CHESTER", "state": "MA"}, {"city": "CHESTERFIELD", "state": "MA"}, {"city": "CHICOPEE", "state": "MA"}, {"city": "CHICOPEE", "state": "MA"}]}
{ "name": "perform inner equi-join with wildcard", "backends": { "couchbase": "pending", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance.", "data": ["../smallZips.data", "../zips.data"], "query": "select * from `../smallZips` join `../zips` on smallZips.`_id` = zips.`_id`", "predicate": "atLeast", "ignoreResultOrder": true, "ignoreFieldOrder": true, "expected": [ {"_id":"01001", "city":"AGAWAM", "loc":[-72.622739,42.070206], "pop":15338, "state":"MA"}, {"_id":"01002", "city":"CUSHMAN", "loc":[-72.51565,42.377017], "pop":36963, "state":"MA"}, {"_id":"01005", "city":"BARRE", "loc":[-72.108354,42.409698], "pop":4546, "state":"MA"}, {"_id":"01007", "city":"BELCHERTOWN", "loc":[-72.410953,42.275103], "pop":10579, "state":"MA"}, {"_id":"01008", "city":"BLANDFORD", "loc":[-72.936114,42.182949], "pop":1240, "state":"MA"}, {"_id":"01010", "city":"BRIMFIELD", "loc":[-72.188455,42.116543], "pop":3706, "state":"MA"}, {"_id":"01011", "city":"CHESTER", "loc":[-72.988761,42.279421], "pop":1688, "state":"MA"}, {"_id":"01012", "city":"CHESTERFIELD", "loc":[-72.833309,42.38167], "pop":177, "state":"MA"}, {"_id":"01013", "city":"CHICOPEE", "loc":[-72.607962,42.162046], "pop":23396, "state":"MA"}, {"_id":"01020", "city":"CHICOPEE", "loc":[-72.576142,42.176443], "pop":31495, "state":"MA"}]}
{ "name": "join the results of a pair of sub-queries", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": ["../zips.data", "../largeZips.data"], "query": "select t1.city, t1.popCA, t2.popMA from (select city, sum(pop) as popCA from `../zips` where state = \"CA\" group by city order by sum(pop) desc limit 200) as t1 join (select city, sum(pop) as popMA from `../largeZips` where state = \"MA\" group by city order by sum(pop) desc limit 200) as t2 on t1.city = t2.city", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "city": "CONCORD", "popCA": 115027, "popMA": 17076 }, { "city": "WILMINGTON", "popCA": 49178, "popMA": 17647 }]}
{ "name": "join with complex conditions", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": ["../slamengine_commits.data", "../slamengine_commits_dup.data"], "query": "select l.sha as child, l.author.login as c_auth, r.sha as parent, r.author.login as p_auth from `../slamengine_commits` as l join `../slamengine_commits_dup` as r on r.sha = l.parents[0].sha and l.author.login = r.author.login where r.author.login || \",\" || l.author.login = \"jdegoes,jdegoes\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "child": "56d1caf5d082d1a6840090986e277d36d03f1859", "c_auth": "jdegoes", "parent": "472dd80e8bdffae0c1bded28a91139941433550d", "p_auth": "jdegoes" }, { "child": "85c3368890be18a77c1bbfd645228de9f43acd43", "c_auth": "jdegoes", "parent": "292c4259f72adffe922a99f97f7b15e5330bc77a", "p_auth": "jdegoes" }, { "child": "292c4259f72adffe922a99f97f7b15e5330bc77a", "c_auth": "jdegoes", "parent": "82e67fef1aae1d283bff90d1d27efd4266d26d49", "p_auth": "jdegoes" }, { "child": "472dd80e8bdffae0c1bded28a91139941433550d", "c_auth": "jdegoes", "parent": "85c3368890be18a77c1bbfd645228de9f43acd43", "p_auth": "jdegoes" }, { "child": "82e67fef1aae1d283bff90d1d27efd4266d26d49", "c_auth": "jdegoes", "parent": "5b54522e340244d618645ace4bd0cbb7edf8bd5b", "p_auth": "jdegoes" }]}
{ "name": "join with multiple conditions", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": ["../slamengine_commits.data", "../slamengine_commits_dup.data"], "query": "select l.sha as child, l.author.login as c_auth, r.sha as parent, r.author.login as p_auth from `../slamengine_commits` as l join `../slamengine_commits_dup` as r on r.sha = l.parents[0].sha and l.author.login = r.author.login", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "child": "b29d8f254e5df2c4d1792f077625924cd1fde2db", "c_auth": "mossprescott", "parent": "166f7337c8fd5db13941abf482de05accb8e9380", "p_auth": "mossprescott" }, { "child": "166f7337c8fd5db13941abf482de05accb8e9380", "c_auth": "mossprescott", "parent": "0999da94bddcbc5bf536e3874aaba50582e96959", "p_auth": "mossprescott" }, { "child": "85c3368890be18a77c1bbfd645228de9f43acd43", "c_auth": "jdegoes", "parent": "292c4259f72adffe922a99f97f7b15e5330bc77a", "p_auth": "jdegoes" }, { "child": "f362cb55d8a4ea8fa23bde416530344438a10144", "c_auth": "mossprescott", "parent": "3bacb29203d499edc69f7ff2b1f5ea681411eb75", "p_auth": "mossprescott" }, { "child": "b8a2302e6a0659875d03bfe4988c000f2ed027a0", "c_auth": "sellout", "parent": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "p_auth": "sellout" }, { "child": "ad8a6a73f898860b48f3d71ed6110b3506a8c898", "c_auth": "mossprescott", "parent": "3de46760d45c4fd0db9a03ad978361df3e8f0998", "p_auth": "mossprescott" }, { "child": "3de46760d45c4fd0db9a03ad978361df3e8f0998", "c_auth": "mossprescott", "parent": "43b4018ae5d1e40bbbc2babb8929ed247b5d2dcb", "p_auth": "mossprescott" }, { "child": "56d1caf5d082d1a6840090986e277d36d03f1859", "c_auth": "jdegoes", "parent": "472dd80e8bdffae0c1bded28a91139941433550d", "p_auth": "jdegoes" }, { "child": "82e67fef1aae1d283bff90d1d27efd4266d26d49", "c_auth": "jdegoes", "parent": "5b54522e340244d618645ace4bd0cbb7edf8bd5b", "p_auth": "jdegoes" }, { "child": "f1b375cf28abebb32f296119dbb347e5121c3a7a", "c_auth": "sellout", "parent": "696c6ff2556bb1ea6a6de86a03736058e8f6c52a", "p_auth": "sellout" }]}
{ "name": "join with reversed condition and complex condition expression", "backends": { "couchbase": "skip", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#1587: Disabled in couchbase due to lack of general join.", "data": ["../slamengine_commits.data", "../slamengine_commits_dup.data"], "query": "select l.sha as child, l.author.login as c_auth, r.sha as parent, r.author.login as p_auth from `../slamengine_commits` as l join `../slamengine_commits_dup` as r on r.sha = l.parents[0].sha", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "child": "b29d8f254e5df2c4d1792f077625924cd1fde2db", "c_auth": "mossprescott", "parent": "166f7337c8fd5db13941abf482de05accb8e9380", "p_auth": "mossprescott" }, { "child": "166f7337c8fd5db13941abf482de05accb8e9380", "c_auth": "mossprescott", "parent": "0999da94bddcbc5bf536e3874aaba50582e96959", "p_auth": "mossprescott" }, { "child": "85c3368890be18a77c1bbfd645228de9f43acd43", "c_auth": "jdegoes", "parent": "292c4259f72adffe922a99f97f7b15e5330bc77a", "p_auth": "jdegoes" }, { "child": "f362cb55d8a4ea8fa23bde416530344438a10144", "c_auth": "mossprescott", "parent": "3bacb29203d499edc69f7ff2b1f5ea681411eb75", "p_auth": "mossprescott" }, { "child": "b8a2302e6a0659875d03bfe4988c000f2ed027a0", "c_auth": "sellout", "parent": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "p_auth": "sellout" }, { "child": "ad8a6a73f898860b48f3d71ed6110b3506a8c898", "c_auth": "mossprescott", "parent": "3de46760d45c4fd0db9a03ad978361df3e8f0998", "p_auth": "mossprescott" }, { "child": "3de46760d45c4fd0db9a03ad978361df3e8f0998", "c_auth": "mossprescott", "parent": "43b4018ae5d1e40bbbc2babb8929ed247b5d2dcb", "p_auth": "mossprescott" }, { "child": "0999da94bddcbc5bf536e3874aaba50582e96959", "c_auth": "mossprescott", "parent": "472dd80e8bdffae0c1bded28a91139941433550d", "p_auth": "jdegoes" }, { "child": "56d1caf5d082d1a6840090986e277d36d03f1859", "c_auth": "jdegoes", "parent": "472dd80e8bdffae0c1bded28a91139941433550d", "p_auth": "jdegoes" }, { "child": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "c_auth": "sellout", "parent": "53d2e5684d9403194dff1cc63423c2590038d1c0", "p_auth": "mossprescott" }]}
{ "name": "join with multiple fields selected", "backends": { "couchbase": "pending", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#1587: Disabled in couchbase due to lack of general join.", "data": ["../smallZips.data", "../extraSmallZips.data"], "query": "SELECT smallZips.city AS CitySmall, smallZips.state AS StateSmall, extraSmallZips.city AS City, extraSmallZips.state AS State, extraSmallZips.pop AS Pop FROM `../smallZips` JOIN `../extraSmallZips` ON smallZips.pop = extraSmallZips.pop WHERE extraSmallZips.state = \"MA\"", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "CitySmall": "AGAWAM", "StateSmall": "MA", "City": "AGAWAM", "State": "MA", "Pop": 15338 }, { "CitySmall": "WARE", "StateSmall": "MA", "City": "WARE", "State": "MA", "Pop": 9808 }]}
{ "name": "flatten one side of a join condition", "backends": { "couchbase": "skip", "mimir": "skip", "marklogic_json": "skip", "marklogic_xml": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "NB": "#2110: Disabled in all qscript-based connectors due to qscript bug.", "data": "../zips.data", "query": "select z1.city as city1, z1.loc, z2.city as city2, z2.pop from `../zips` as z1 join `../zips` as z2 on z1.loc[*] = z2.pop", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "city1": "WYNNEWOOD", "loc": [-75.275984, 40], "city2": "VAN HORNESVILLE", "pop": 40 }, { "city1": "WYNNEWOOD", "loc": [-75.275984, 40], "city2": "SELBYVILLE", "pop": 40 }, { "city1": "WYNNEWOOD", "loc": [-75.275984, 40], "city2": "STAR PRAIRIE", "pop": 40 }, { "city1": "WYNNEWOOD", "loc": [-75.275984, 40], "city2": "MERIDEN", "pop": 40 }, { "city1": "WYNNEWOOD", "loc": [-75.275984, 40], "city2": "FELT", "pop": 40 }, { "city1": "WYNNEWOOD", "loc": [-75.275984, 40], "city2": "NEWKIRK", "pop": 40 }, { "city1": "WYNNEWOOD", "loc": [-75.275984, 40], "city2": "VIDAL", "pop": 40 }]}
{ "name": "order join by alias", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": ["../smallZips.data", "../zips.data"], "query": "select z1.`_id` as zip, z2.pop / 1000 as popK from `../smallZips` as z1 inner join `../zips` as z2 on z1.`_id` = z2.`_id` order by popK desc", "predicate": "initial", "expected": [{ "zip": "01201", "popK": 50.655 }, { "zip": "01040", "popK": 43.704 }, { "zip": "01085", "popK": 40.117 }, { "zip": "01002", "popK": 36.963 }, { "zip": "01109", "popK": 32.635 }, { "zip": "01020", "popK": 31.495 }, { "zip": "01060", "popK": 27.939 }, { "zip": "01089", "popK": 27.537 }, { "zip": "01108", "popK": 25.519 }, { "zip": "01013", "popK": 23.396 }]}
{ "name": "right outer join", "backends": { "mimir": "skip", "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": ["../smallZips.data", "../zips.data"], "query": "select smallZips.city, zips.state from `../smallZips` right outer join `../zips` on smallZips.`_id` = zips.`_id`", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "AGAWAM", "state": "MA" }, { "city": "CUSHMAN", "state": "MA" }, { "state": "PA" }]}
{ "name": "select over fields with same name", "backends": { "couchbase": "skip", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#1587: Disabled in couchbase due to lack of general join.", "data": ["../owners.data", "../cars.data"], "query": "SELECT owner.name, car.name from `../owners` as owner join `../cars` as car on car.`_id` = owner.carId", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "name": "emma", "name0": "RangeRover-Evoque" }, { "name": "scott", "name0": "Honda-civic" }, { "name": "scott", "name0": "BMW-X5" }]}
{ "name": "select over fields with same name and condition with AND", "backends": { "couchbase": "skip", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#1587: Disabled in couchbase due to lack of general join.", "data": ["../owners.data", "../cars.data"], "query": "SELECT owner.name, car.name from `../owners` as owner join `../cars` as car on car.`_id` = owner.carId and owner.year = car.year[0]", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "name": "emma", "name0": "RangeRover-Evoque" }, { "name": "scott", "name0": "Honda-civic" }, { "name": "scott", "name0": "BMW-X5" }]}
{ "name": "self-join where the left hand side is constant", "backends": { "mimir": "skip", "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": "../largeZips.data", "query": "select a.city, b.state from `../largeZips` as a, `../largeZips` as b where a.`_id` = b.`_id` and \"CA\" = b.state", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "REDONDO BEACH", "state": "CA" }]}
{ "name": "self-join with complex conditions", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "NB": "#2120: Disabled in marklogic due to slow performance. #1587: Disabled in couchbase due to lack of general join.", "data": "../slamengine_commits.data", "query": "select l.sha as child, l.author.login as c_auth, r.sha as parent, r.author.login as p_auth from `../slamengine_commits` as l join `../slamengine_commits` as r on r.sha = l.parents[0].sha and l.author.login = r.author.login where r.author.login || \",\" || l.author.login = \"jdegoes,jdegoes\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "child": "56d1caf5d082d1a6840090986e277d36d03f1859", "c_auth": "jdegoes", "parent": "472dd80e8bdffae0c1bded28a91139941433550d", "p_auth": "jdegoes" }, { "child": "85c3368890be18a77c1bbfd645228de9f43acd43", "c_auth": "jdegoes", "parent": "292c4259f72adffe922a99f97f7b15e5330bc77a", "p_auth": "jdegoes" }, { "child": "292c4259f72adffe922a99f97f7b15e5330bc77a", "c_auth": "jdegoes", "parent": "82e67fef1aae1d283bff90d1d27efd4266d26d49", "p_auth": "jdegoes" }, { "child": "472dd80e8bdffae0c1bded28a91139941433550d", "c_auth": "jdegoes", "parent": "85c3368890be18a77c1bbfd645228de9f43acd43", "p_auth": "jdegoes" }, { "child": "82e67fef1aae1d283bff90d1d27efd4266d26d49", "c_auth": "jdegoes", "parent": "5b54522e340244d618645ace4bd0cbb7edf8bd5b", "p_auth": "jdegoes" }]}
{ "name": "flattening both sides of a join condition", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "NB": "#2110: Disabled in all qscript-based connectors due to qscript bug.", "data": ["../zips.data", "../largeZips.data"], "query": "select z1.city as city1, z1.loc as loc1, z2.city as city2, z2.loc as loc2 from `../zips` as z1 join `../largeZips` as z2 on z1.loc[*] = z2.loc[*] where z1.city < z2.city", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "city1": "GERLAW", "loc1": [-90.622765, 40.999519], "city2": "SAINT PETERS", "loc2": [-90.622765, 38.78024] }, { "city1": "GLEN DALE", "loc1": [-80.732263, 39.959732], "city2": "PHILADELPHIA", "loc2": [-75.202445, 39.959732] }]}
{ "name": "filter on JS with non-JS", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "largeZips.data", "query": "select city, pop from largeZips where length(city) < 5 and pop < 30000", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{"city": "EDEN" , "pop": 26675}, {"city": "ABAC" , "pop": 27906}, {"city": "TICE" , "pop": 25029}, {"city": "TAFT" , "pop": 26113}, {"city": "TROY" , "pop": 29422}, {"city": "LIMA" , "pop": 27344}, {"city": "AVON" , "pop": 29182}, {"city": "NORA" , "pop": 29718}, {"city": "BOND" , "pop": 149}, {"city": "PINE" , "pop": 2827}]}
{ "name": "largest cities", "backends": { "mimir": "skip", "mongodb_2_6": "ignoreFieldOrder", "mongodb_3_0": "ignoreFieldOrder", "mongodb_read_only": "ignoreFieldOrder", "postgresql": "pending" }, "data": "zips.data", "query": "select city, state, sum(pop) as total from zips group by city, state order by sum(pop) desc limit 10", "predicate": "exactly", "expected": [{ "city": "CHICAGO", "state": "IL", "total": 2452177 }, { "city": "BROOKLYN", "state": "NY", "total": 2300504 }, { "city": "LOS ANGELES", "state": "CA", "total": 2102295 }, { "city": "HOUSTON", "state": "TX", "total": 2095918 }, { "city": "PHILADELPHIA", "state": "PA", "total": 1610956 }, { "city": "NEW YORK", "state": "NY", "total": 1476790 }, { "city": "BRONX", "state": "NY", "total": 1209548 }, { "city": "SAN DIEGO", "state": "CA", "total": 1049298 }, { "city": "DETROIT", "state": "MI", "total": 963243 }, { "city": "DALLAS", "state": "TX", "total": 940191 }]}
{ "name": "largest zips", "backends": { "mimir": "skip", "postgresql": "pending", "spark_local": "pending", "spark_hdfs": "pending" }, "data": "zips.data", "query": "select city, pop from zips where pop > 90000 order by city, pop desc", "predicate": "exactly", "expected": [{ "city": "BELL GARDENS", "pop": 99568 }, { "city": "BROOKLYN", "pop": 111396 }, { "city": "CHICAGO", "pop": 112047 }, { "city": "CHICAGO", "pop": 98612 }, { "city": "CHICAGO", "pop": 95971 }, { "city": "CHICAGO", "pop": 94317 }, { "city": "CHICAGO", "pop": 92005 }, { "city": "CHICAGO", "pop": 91814 }, { "city": "LOS ANGELES", "pop": 96074 }, { "city": "NEW YORK", "pop": 106564 }, { "city": "NEW YORK", "pop": 100027 }, { "city": "NORWALK", "pop": 94188 }]}
{ "name": "handle nested let binding and selects", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "min_pop := 10000; max_pop := 20000; select zips.city, zips.pop from zips where zips.pop > min_pop and zips.pop < max_pop", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "AGAWAM", "pop": 15338 }, { "city": "BELCHERTOWN", "pop": 10579 }, { "city": "MOUNT TOM", "pop": 16864 }, { "city": "EAST LONGMEADOW", "pop": 13367 }, { "city": "FEEDING HILLS", "pop": 11985 }]}
{ "name": "handle select in form of let", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "cityzips := select zips.city, zips.state from zips where zips.state = \"CT\"; select city, state from cityzips where city = \"SOUTHBURY\" ", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "city": "SOUTHBURY", "state": "CT" }]}
{ "name": "handle let as project of select", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": ["cars.data", "smallZips.data"], "query": "select (smallZips := select * from cars; select * from smallZips) as result from smallZips", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "result": { "_id": "1", "year": [2012], "name": "RangeRover-Evoque" } }, { "result": { "_id": "2", "year": [2010], "name": "Honda-civic" } }, { "result": { "_id": "3", "year": [2003], "name": "BMW-X5" } }]}
{ "name": "LIKE with constant-foldable pattern", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "variables": { "substr": "\"ULDER\"" }, "query": "select * from zips where city like (\"%\" || :substr || \"%\")", "predicate": "exactly", "ignoreResultOrder": true, "ignoredFields": ["_id"], "ignoreFieldOrder": true, "expected": [ { "city": "BOULDER JUNCTION", "loc": [ -89.632454, 46.111183], "pop": 563, "state": "WI" }, { "city": "BOULDER", "loc": [-112.113757, 46.230647], "pop": 1737, "state": "MT" }, { "city": "BOULDER", "loc": [-105.21426, 40.049733], "pop": 18174, "state": "CO" }, { "city": "BOULDER", "loc": [-105.285131, 40.017235], "pop": 29384, "state": "CO" }, { "city": "BOULDER", "loc": [-105.239178, 39.991381], "pop": 39860, "state": "CO" }, { "city": "BOULDER", "loc": [-105.277073, 40.037482], "pop": 21550, "state": "CO" }, { "city": "BOULDER", "loc": [-109.540105, 42.688146], "pop": 112, "state": "WY" }, { "city": "BOULDER", "loc": [-111.426646, 37.916606], "pop": 131, "state": "UT" }, { "city": "BOULDER CITY", "loc": [-114.834413, 35.972711], "pop": 12920, "state": "NV" }, { "city": "BOULDER CREEK", "loc": [-122.133053, 37.149934], "pop": 9434, "state": "CA" }]}
{ "name": "reduce a literal set with negatives", "data": "cars.data", "query": "select max((0, 1, -2, 5)) as maxlit from cars", "predicate": "exactly", "expected": [{ "maxlit": 5 }]}
{ "name": "job postings by city ", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "NB": "Skipped for marklogic_xml because it times out.", "data": "jobs_jobinfo.data", "query": "select count(PositionHeader.PositionLocation.LocationCity) as counter, PositionHeader.PositionLocation.LocationCity as location from jobs_jobinfo group by location order by counter desc limit 10", "predicate": "initial", "expected": [{ "counter": 3, "location": "Boston" }, { "counter": 2, "location": "Denver" }, { "counter": 1, "location": "Boulder" }]}
{ "name": "long city names in Colorado", "backends": { "couchbase": "ignoreFieldOrder", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "largeZips.data", "query": "select distinct city, length(city) as len from largeZips where state=\"CO\" and length(city) >= 10", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "GRAND LAKE", "len": 10 }, { "city": "MONTE VISTA", "len": 11 }, { "city": "FORT GARLAND", "len": 12 }, { "city": "CRESTED BUTTE", "len": 13 }, { "city": "PAGOSA SPRINGS", "len": 14 }, { "city": "MANITOU SPRINGS", "len": 15 }, { "city": "RED FEATHER LAKE", "len": 16 }]}
{ "name": "many simple projections (order matters)", "backends": { "marklogic_json": "ignoreFieldOrder", "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select city as a, city as b, city as c, city as d, city as e, city as f from zips where `_id` = \"80301\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "a": "BOULDER", "b": "BOULDER", "c": "BOULDER", "d": "BOULDER", "e": "BOULDER", "f": "BOULDER" } ]}
{ "name": "match on case-insensitive string", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select * from zips where city ~* \"^bOu\"", "predicate": "atLeast", "ignoreResultOrder": true, "ignoredFields": ["_id"], "ignoreFieldOrder": true, "expected": [ { "city": "BOUCKVILLE", "loc": [ -75.567841, 42.894024], "pop": 650, "state": "NY" }, { "city": "BOUTON", "loc": [ -93.996286, 41.828432], "pop": 552, "state": "IA" }, { "city": "BOULDER JUNCTION", "loc": [ -89.632454, 46.111183], "pop": 563, "state": "WI" }, { "city": "BOULDER", "loc": [-112.113757, 46.230647], "pop": 1737, "state": "MT" }, { "city": "BOURBONNAIS", "loc": [ -87.879023, 41.166119], "pop": 18311, "state": "IL" }, { "city": "BOURBON", "loc": [ -91.22254, 38.172039], "pop": 4456, "state": "MO" }, { "city": "BOUTTE", "loc": [ -90.393396, 29.897319], "pop": 2432, "state": "LA" }, { "city": "BOUNTIFUL", "loc": [ -111.872658, 40.877513], "pop": 41077, "state": "UT" }, { "city": "BOULDER CITY", "loc": [ -114.834413, 35.972711], "pop": 12920, "state": "NV" }, { "city": "BOURG", "loc": [ -90.60866, 29.548489], "pop": 5310, "state": "LA" }]}
{ "name": "match like complement", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select city from zips where city not like \"%E%\"", "predicate": "atLeast", "ignoreResultOrder": true, "expected": ["AGAWAM", "CUSHMAN", "BLANDFORD", "CUMMINGTON", "MOUNT TOM", "GRANBY", "TOLLAND", "HUNTINGTON", "LUDLOW", "MONSON"]}
{ "name": "match like pattern", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select city from zips where city like \"%OULD%CIT%\"", "predicate": "atLeast", "ignoreResultOrder": true, "expected": ["GOULD CITY", "BOULDER CITY"]}
{ "name": "match regex pattern", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select city from zips where city ~ \"OULD.{0,2} CIT\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": ["GOULD CITY", "BOULDER CITY"]}
{ "name": "regexes in expressions and filter, with fields and constants providing the pattern", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "largeZips.data", "query": "select distinct city, city ~ \"OUL\" as a, \"some text with BOULDER in it\" ~ city as b from largeZips where city ~ \"^B[^ ]+ER$\" and \"BOULDER or BEELER\" ~ city", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "city": "BOULDER", "a": true, "b": true }, { "city": "BEELER", "a": false, "b": false } ]}
{ "name": "distinct * (MongoDB)", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "skip", "mongodb_read_only": "pending", "postgresql": "skip", "spark_hdfs": "skip", "spark_local": "timeout" }, "data": "../cities.data", "query": "select distinct * from `../cities` where city = \"BOSTON\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "city": "BOSTON" }]}
{ "name": "convert a field to ObjectId", "backends": { "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "skip", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending", "spark_hdfs": "skip", "spark_local": "timeout" }, "data": "../objectids.data", "query": "select oid(bar) from `../objectids`", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "$oid": "4f95e00d9060633ce7fbab93" }, { "$oid": "4f95e0119060633ce7fbab95" }, { "$oid": "4f95e0119060633ce7fbab97" }]}
{ "name": "filter on time_of_day (MongoDB)", "backends": { "mimir": "skip", "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "mongodb_read_only": "pending", "postgresql": "skip", "spark_local": "skip", "spark_hdfs": "timeout" }, "data": "../../days.data", "query": "select day, time_of_day(ts) as tod, time_of_day(day) as `not a date`, time_of_day(missing) as missing from `../../days` where time_of_day(ts) >= time(\"08:00\") and time_of_day(ts) < time(\"10:20:30.400\")", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "day": "Tuesday", "tod": "08:00:00.000" }, { "day": "Wednesday", "tod": "09:00:00.000" }, { "day": "Thursday", "tod": "10:00:00.000" }]}
{ "name": "convert dates to/from strings (MongoDB)", "backends": { "mimir": "skip", "postgresql": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "couchbase": "skip", "spark_local": "skip", "spark_hdfs": "timeout" }, "data": "../../days.data", "query": "select date(substring(str, 0, 10)), time(substring(str, 11, 20)), timestamp(str), to_string(ts) from `../../days`", "predicate": "exactly", "ignoreResultOrder": true, "NB": "The date and time values here are the wrong type. This is an unfortunate consequence of the way we store them in Mongo.", "expected": [ { "0": { "$timestamp": "2014-08-17T00:00:00.000Z" }, "1": "06:00:00Z", "2": { "$timestamp": "2014-08-17T06:00:00.000Z" }, "3": "2014-08-17T06:00:00.000Z" }, { "0": { "$timestamp": "2014-08-18T00:00:00.000Z" }, "1": "07:00:00Z", "2": { "$timestamp": "2014-08-18T07:00:00.000Z" }, "3": "2014-08-18T07:00:00.000Z" }, { "0": { "$timestamp": "2014-08-19T00:00:00.000Z" }, "1": "08:00:00Z", "2": { "$timestamp": "2014-08-19T08:00:00.000Z" }, "3": "2014-08-19T08:00:00.000Z" }, { "0": { "$timestamp": "2014-08-20T00:00:00.000Z" }, "1": "09:00:00Z", "2": { "$timestamp": "2014-08-20T09:00:00.000Z" }, "3": "2014-08-20T09:00:00.000Z" }, { "0": { "$timestamp": "2014-08-21T00:00:00.000Z" }, "1": "10:00:00Z", "2": { "$timestamp": "2014-08-21T10:00:00.000Z" }, "3": "2014-08-21T10:00:00.000Z" }, { "0": { "$timestamp": "2014-08-22T00:00:00.000Z" }, "1": "11:00:00Z", "2": { "$timestamp": "2014-08-22T11:00:00.000Z" }, "3": "2014-08-22T11:00:00.000Z" }, { "0": { "$timestamp": "2014-08-23T00:00:00.000Z" }, "1": "12:00:00Z", "2": { "$timestamp": "2014-08-23T12:00:00.000Z" }, "3": "2014-08-23T12:00:00.000Z" }, { "0": { "$timestamp": "1969-12-31T00:00:00.000Z" }, "1": "23:59:59Z", "2": { "$timestamp": "1969-12-31T23:59:59.000Z" }, "3": "1969-12-31T23:59:59.000Z" }, { "0": { "$timestamp": "1653-02-10T00:00:00.000Z" }, "1": "01:13:20Z", "2": { "$timestamp": "1653-02-10T01:13:20.000Z" }, "3": "1653-02-10T01:13:20.000Z" }]}
{ "name": "match LIKE with multiple lines", "backends": { "mimir": "skip", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "data": "slamengine_commits.data", "query": "select count(*) from slamengine_commits where commit.message like \"Merge%\"", "predicate": "exactly", "expected": [13]}
{ "name": "multi-flatten with fields at various depths", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "skip", "mimir": "skip", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "postgresql": "pending", "spark_hdfs": "skip", "spark_local": "timeout" }, "NB": "Skipped for spark and marklogic_xml because it times out.", "data": "nested_foo.data", "query": "select * from nested_foo where ( foo LIKE \"%zap%\" OR foo[*] LIKE \"%15%\" OR foo[*][*] LIKE \"%meh%\" OR foo[*][*].baz LIKE \"%moo%\" OR foo[*][*].baz[*] LIKE \"%quu%\" OR a LIKE \"%13%\")", "FIXME": "Should use `containsExactly`, but see issue #732.", "predicate": "exactly", "ignoreFieldOrder": true, "expected": [ { "_id": { "$oid": "5552744bd86735b7268fd002" }, "a": "13" }, { "_id": { "$oid": "55538123d86735b7268fd003" }, "foo": "zap" }, { "_id": { "$oid": "55538123d86735b7268fd004" }, "foo": [15, [{ "baz": ["quux"] }]] }, { "_id": { "$oid": "55538123d86735b7268fd005" }, "foo": ["15z", [{ "baz": ["qx"] }]] }, { "_id": { "$oid": "55538123d86735b7268fd006" }, "foo": [18, ["meh", { "baz": ["qx"] }]] }, { "_id": { "$oid": "55538123d86735b7268fd007" }, "foo": [16, [{ "baz": "mooooo" }]] }]}
{ "name": "flatten a single field as both object and array", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "NB": "Skipped for marklogic_xml because it times out.", "data": "nested_foo.data", "query": "select * from nested_foo where ( foo{*} LIKE \"%15%\" OR foo{*} = 15 OR foo[*] LIKE \"%15%\" OR foo[*] = 15)", "predicate": "exactly", "ignoreResultOrder": true, "ignoredFields": ["_id"], "ignoreFieldOrder": true, "expected": [{ "foo": [15, [{ "baz": ["quux"] }]] }, { "foo": ["15z", [{ "baz": ["qx"] }]] }, { "foo": { "bar": 15, "baz": ["qx"] } }, { "foo": { "bar": "a15", "baz": ["qx"] } }]}
{ "name": "negate matches in filter and projection", "backends": { "couchbase": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "largeZips.data", "query": "select city, city !~ \"A\" as noA from largeZips where city !~ \"CHI\"", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "city": "CUSHMAN", "noA": false }, { "city": "WORCESTER", "noA": true }, { "city": "FRAMINGHAM", "noA": false }, { "city": "MARLBOROUGH", "noA": false }, { "city": "MILFORD", "noA": true }, { "city": "NATICK", "noA": false }, { "city": "WOBURN", "noA": true }, { "city": "ANDOVER", "noA": false }, { "city": "BILLERICA", "noA": false }, { "city": "DRACUT", "noA": false }]}
{ "name": "filter on is not null", "backends": { "mimir": "skip", "marklogic_json": "pending", "postgresql": "pending" }, "description": "expression with `is not null` should be true whenever the same filter is satisfied", "data": "nulls.data", "query": "select distinct (val is not null) as expr from nulls where val is not null", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "expr": true }]}
{ "name": "filter on `!= null`", "backends": { "mimir": "skip", "marklogic_json": "pending", "postgresql": "pending" }, "data": "nulls.data", "query": "select distinct (val != null) as expr from nulls where val != null", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "expr": true }]}
{ "name": "filter on is null", "backends": { "mimir": "skip", "marklogic_json": "pending", "postgresql": "pending" }, "description": "expression with `is null` should be true whenever the same filter is satisfied", "data": "nulls.data", "query": "select distinct (val is null) as expr from nulls where val is null", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "expr": true }]}
{ "name": "expressions with `= null` and `is null`", "backends": { "couchbase": "ignoreFieldOrder", "mimir": "timeout", "marklogic_json": "pending", "marklogic_xml": "pending", "postgresql": "pending" }, "data": "nulls.data", "query": "select name, val, val = null, val is null, val is not null, nested.val as nval, nested.val = null, nested.val is null, nested.val is not null from nulls", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "name": "null", "val": null, "2": true, "3": true, "4": false, "nval": null, "6": true, "7": true, "8": false }, { "name": "empty", "val": {}, "2": false, "3": false, "4": true, "nval": {}, "6": false, "7": false, "8": true }, { "name": "one", "val": 1, "2": false, "3": false, "4": true, "nval": 1, "6": false, "7": false, "8": true }]}
{ "name": "expressions with `= null` and `is null`, with missing fields (pending #465)", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "data": "nullsWithMissing.data", "query": "select name, val, val = null, val is null, val is not null, nested.val as nval, nested.val = null, nested.val is null, nested.val is not null from nulls", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "name": "missing parent", "2": true, "3": true, "4": false, "6": true, "7": true, "8": false }, { "name": "missing", "2": true, "3": true, "4": false, "6": true, "7": true, "8": false }, { "name": "null", "val": null, "2": true, "3": true, "4": false, "nval": null, "6": true, "7": true, "8": false }, { "name": "empty", "val": {}, "2": false, "3": false, "4": true, "nval": {}, "6": false, "7": false, "8": true }, { "name": "one", "val": 1, "2": false, "3": false, "4": true, "nval": 1, "6": false, "7": false, "8": true }]}
{ "name": "convert null to/from strings", "backends": { "marklogic_json": "ignoreFieldOrder", "mimir": "skip", "postgresql": "pending" }, "data": "nulls.data", "query": "select null(name) as n, to_string(val) as s from nulls where name = \"null\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "n": null, "s": "null" }]}
{ "name": "numeric field names", "backends": { "couchbase": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "smallZips.data", "query": "select city as `12`, pop as `42` from smallZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "12": "NEW SALEM", "42": 14077 } ]}
{ "name": "wildcard with projection and synthetic field", "backends": { "mimir": "skip", "mongodb_2_6": "ignoreResultOrder", "mongodb_3_0": "ignoreResultOrder", "mongodb_3_2": "ignoreResultOrder", "mongodb_3_4": "ignoreResultOrder", "mongodb_read_only": "ignoreResultOrder", "postgresql": "pending" }, "data": "largeZips.data", "query": "select *, pop * 10 as dpop from largeZips order by pop / 10 desc", "predicate": "initial", "ignoreFieldOrder": true, "expected": [ { "_id": "60623", "city": "CHICAGO", "loc": [ -87.7157, 41.849015], "pop": 112047.0, "state": "IL", "dpop": 1120470.0 }, { "_id": "11226", "city": "BROOKLYN", "loc": [ -73.956985, 40.646694], "pop": 111396.0, "state": "NY", "dpop": 1113960.0 }, { "_id": "10021", "city": "NEW YORK", "loc": [ -73.958805, 40.768476], "pop": 106564.0, "state": "NY", "dpop": 1065640.0 }, { "_id": "10025", "city": "NEW YORK", "loc": [ -73.968312, 40.797466], "pop": 100027.0, "state": "NY", "dpop": 1000270.0 }, { "_id": "90201", "city": "BELL GARDENS", "loc": [-118.17205, 33.969177], "pop": 99568.0, "state": "CA", "dpop": 995680.0 }, { "_id": "60617", "city": "CHICAGO", "loc": [ -87.556012, 41.725743], "pop": 98612.0, "state": "IL", "dpop": 986120.0 }, { "_id": "90011", "city": "LOS ANGELES", "loc": [-118.258189, 34.007856], "pop": 96074.0, "state": "CA", "dpop": 960740.0 }, { "_id": "60647", "city": "CHICAGO", "loc": [ -87.704322, 41.920903], "pop": 95971.0, "state": "IL", "dpop": 959710.0 }, { "_id": "60628", "city": "CHICAGO", "loc": [ -87.624277, 41.693443], "pop": 94317.0, "state": "IL", "dpop": 943170.0 }, { "_id": "90650", "city": "NORWALK", "loc": [-118.081767, 33.90564 ], "pop": 94188.0, "state": "CA", "dpop": 941880.0 }]}
{ "name": "case-insensitive regex in projections", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "largeZips.data", "query": "select city, city ~* \"boU\" as a, city !~* \"Bou\" as b from largeZips", "NB": "Should also test `doesNotContain`, see SD-577.", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "city": "CUSHMAN", "a": false, "b": true }, { "city": "CHICOPEE", "a": false, "b": true }, { "city": "HOLYOKE", "a": false, "b": true }, { "city": "FLORENCE", "a": false, "b": true }, { "city": "MONTGOMERY", "a": false, "b": true }, { "city": "WEST SPRINGFIELD", "a": false, "b": true }, { "city": "SPRINGFIELD", "a": false, "b": true }, { "city": "PITTSFIELD", "a": false, "b": true }, { "city": "FITCHBURG", "a": false, "b": true }, { "city": "MELBOURNE", "a": true, "b": false }, { "city": "BOUNTIFUL", "a": true, "b": false }, { "city": "BOULDER", "a": true, "b": false }]}
{ "name": "project unrelated field with object flatten", "backends": { "couchbase": "pending", "mimir": "timeout", "postgresql": "pending" }, "data": "usa_factbook.data", "query": "select intro from usa_factbook where geo{*}.text = \"19,924 km\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "background": { "text": "Britain's American colonies broke with the mother country in 1776 and were recognized as the new nation of the United States of America following the Treaty of Paris in 1783. During the 19th and 20th centuries, 37 new states were added to the original 13 as the nation expanded across the North American continent and acquired a number of overseas possessions. The two most traumatic experiences in the nation's history were the Civil War (1861-65), in which a northern Union of states defeated a secessionist Confederacy of 11 southern slave states, and the Great Depression of the 1930s, an economic downturn during which about a quarter of the labor force lost its jobs. Buoyed by victories in World Wars I and II and the end of the Cold War in 1991, the US remains the world''s most powerful nation state. Since the end of World War II, the economy has achieved relatively steady growth, low unemployment and inflation, and rapid advances in technology." } }]}
{ "name": "project from non-static concatted array", "backends": { "mimir": "skip", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "largeZips.data", "query": "select (loc || [1, 2])[1] from largeZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [42.377017, 42.176443, 42.202007, 42.324662, 42.129484, 42.115066, 42.085314, 42.114455, 42.453086, 42.579563]}
{ "name": "project from static concatted array prefix", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "largeZips.data", "query": "select ([6, 7] || loc)[1] from largeZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [7, 7, 7, 7, 7, 7, 7, 7, 7, 7]}
{ "name": "project index from group", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_2_6": "ignoreFieldOrder", "mongodb_3_0": "ignoreFieldOrder", "mongodb_3_2": "ignoreFieldOrder", "mongodb_3_4": "ignoreFieldOrder", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "slamengine_commits.data", "query": "select parents[0].sha, count(*) as count from slamengine_commits group by parents[0].sha", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "sha": "b812837ee2f72be3aaee582b42e3ad901d1f7371", "count": 1 }, { "sha": "9897104b5a22571a5940f4ba2ba89addaef81ed0", "count": 1 }, { "sha": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "count": 1 }, { "sha": "82e67fef1aae1d283bff90d1d27efd4266d26d49", "count": 2 }, { "sha": "56d1caf5d082d1a6840090986e277d36d03f1859", "count": 4 }, { "sha": "b29d8f254e5df2c4d1792f077625924cd1fde2db", "count": 1 }, { "sha": "166f7337c8fd5db13941abf482de05accb8e9380", "count": 1 }, { "sha": "92245a05c6b851a97883d9276889b4f6f09fff9d", "count": 1 }, { "sha": "a31c0a8f2d0f771cf2aecb67c9822f930c260c29", "count": 2 }, { "sha": "696c6ff2556bb1ea6a6de86a03736058e8f6c52a", "count": 1 }]}
{ "name": "project index from group with filter", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_2_6": "ignoreFieldOrder", "mongodb_3_0": "ignoreFieldOrder", "mongodb_3_2": "ignoreFieldOrder", "mongodb_3_4": "ignoreFieldOrder", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "slamengine_commits.data", "query": "select parents[0].sha, count(*) as count from slamengine_commits where parents[0].sha like \"5%\" group by parents[0].sha", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "sha": "53d2e5684d9403194dff1cc63423c2590038d1c0", "count": 1 }, { "sha": "56d1caf5d082d1a6840090986e277d36d03f1859", "count": 4 }, { "sha": "5b54522e340244d618645ace4bd0cbb7edf8bd5b", "count": 1 }]}
{ "name": "project index with object flatten", "backends": { "couchbase": "pending", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "slamengine_commits.data", "query": "select parents[0] as parent, commit{*} from slamengine_commits", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "parent": { "sha": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "url": "https://api.github.com/repos/slamdata/slamengine/commits/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "html_url": "https://github.com/slamdata/slamengine/commit/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6" }, "commit": { "name": "Greg Pfeil", "email": "greg@technomadic.org", "date": "2015-01-29T15:52:37Z" } }, { "parent": { "sha": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "url": "https://api.github.com/repos/slamdata/slamengine/commits/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "html_url": "https://github.com/slamdata/slamengine/commit/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6" }, "commit": { "name": "Greg Pfeil", "email": "greg@technomadic.org", "date": "2015-01-29T15:52:37Z" } }, { "parent": { "sha": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "url": "https://api.github.com/repos/slamdata/slamengine/commits/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "html_url": "https://github.com/slamdata/slamengine/commit/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6" }, "commit": "Merge pull request #576 from mossprescott/ready/445\n\nimplement `date` and `time` conversions (Fixes #445)" }, { "parent": { "sha": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "url": "https://api.github.com/repos/slamdata/slamengine/commits/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "html_url": "https://github.com/slamdata/slamengine/commit/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6" }, "commit": { "sha": "2b393405b888dab4f83a56faa66c325cbb4c6d97", "url": "https://api.github.com/repos/slamdata/slamengine/git/trees/2b393405b888dab4f83a56faa66c325cbb4c6d97" } }, { "parent": { "sha": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "url": "https://api.github.com/repos/slamdata/slamengine/commits/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "html_url": "https://github.com/slamdata/slamengine/commit/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6" }, "commit": "https://api.github.com/repos/slamdata/slamengine/git/commits/b8a2302e6a0659875d03bfe4988c000f2ed027a0" }, { "parent": { "sha": "3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "url": "https://api.github.com/repos/slamdata/slamengine/commits/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6", "html_url": "https://github.com/slamdata/slamengine/commit/3d44ce48fc0670aaf39ba1acd0e1c161f14cc2d6" }, "commit": 0.0 }, { "parent": { "sha": "b29d8f254e5df2c4d1792f077625924cd1fde2db", "url": "https://api.github.com/repos/slamdata/slamengine/commits/b29d8f254e5df2c4d1792f077625924cd1fde2db", "html_url": "https://github.com/slamdata/slamengine/commit/b29d8f254e5df2c4d1792f077625924cd1fde2db" }, "commit": { "name": "Moss Prescott", "email": "moss@theprescotts.com", "date": "2015-01-29T00:23:14Z" } }, { "parent": { "sha": "b29d8f254e5df2c4d1792f077625924cd1fde2db", "url": "https://api.github.com/repos/slamdata/slamengine/commits/b29d8f254e5df2c4d1792f077625924cd1fde2db", "html_url": "https://github.com/slamdata/slamengine/commit/b29d8f254e5df2c4d1792f077625924cd1fde2db" }, "commit": { "name": "Moss Prescott", "email": "moss@theprescotts.com", "date": "2015-01-29T00:23:14Z" } }, { "parent": { "sha": "b29d8f254e5df2c4d1792f077625924cd1fde2db", "url": "https://api.github.com/repos/slamdata/slamengine/commits/b29d8f254e5df2c4d1792f077625924cd1fde2db", "html_url": "https://github.com/slamdata/slamengine/commit/b29d8f254e5df2c4d1792f077625924cd1fde2db" }, "commit": "Merge remote-tracking branch 'upstream/master' into ready/445" }, { "parent": { "sha": "b29d8f254e5df2c4d1792f077625924cd1fde2db", "url": "https://api.github.com/repos/slamdata/slamengine/commits/b29d8f254e5df2c4d1792f077625924cd1fde2db", "html_url": "https://github.com/slamdata/slamengine/commit/b29d8f254e5df2c4d1792f077625924cd1fde2db" }, "commit": { "sha": "2b393405b888dab4f83a56faa66c325cbb4c6d97", "url": "https://api.github.com/repos/slamdata/slamengine/git/trees/2b393405b888dab4f83a56faa66c325cbb4c6d97" } }]}
{ "name": "select array element", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "largeZips.data", "query": "select city, loc[0] as lat from largeZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "CUSHMAN", "lat": -72.51565 }, { "city": "CHICOPEE", "lat": -72.576142 }, { "city": "HOLYOKE", "lat": -72.626193 }, { "city": "FLORENCE", "lat": -72.654245 }, { "city": "MONTGOMERY", "lat": -72.754318 }, { "city": "WEST SPRINGFIELD", "lat": -72.641109 }, { "city": "SPRINGFIELD", "lat": -72.558432 }, { "city": "SPRINGFIELD", "lat": -72.554349 }, { "city": "PITTSFIELD", "lat": -73.247088 }, { "city": "FITCHBURG", "lat": -71.803133 }]}
{ "name": "select count and another field", "backends": { "couchbase": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "slamengine_commits.data", "query": "select committer.login, count(*) from slamengine_commits", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "login": "sellout", "1": 30 }, { "login": "mossprescott", "1": 30 }]}
{ "name": "select twenty fields quickly", "backends": { "marklogic_json": "ignoreFieldOrder", "mimir": "skip", "postgresql": "pending" }, "data": "largeZips.data", "query": "select city as a, city as b, city as c, city as d, city as e, city as f, city as g, city as h, city as i, city as j, city as k, city as l, city as m, city as n, city as o, city as p, city as q, city as r, city as s, city as t from largeZips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "a": "CUSHMAN", "b": "CUSHMAN", "c": "CUSHMAN", "d": "CUSHMAN", "e": "CUSHMAN", "f": "CUSHMAN", "g": "CUSHMAN", "h": "CUSHMAN", "i": "CUSHMAN", "j": "CUSHMAN", "k": "CUSHMAN", "l": "CUSHMAN", "m": "CUSHMAN", "n": "CUSHMAN", "o": "CUSHMAN", "p": "CUSHMAN", "q": "CUSHMAN", "r": "CUSHMAN", "s": "CUSHMAN", "t": "CUSHMAN"}]}
{ "name": "select wildcard and field", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "largeZips.data", "query": "select *, pop/1000 as popInK from largeZips", "predicate": "atLeast", "ignoreResultOrder": true, "ignoreFieldOrder": true, "expected": [ {"_id": "01002", "city": "CUSHMAN", "loc": [ -72.51565, 42.377017], "pop": 36963, "state": "MA", "popInK": 36.963}, {"_id": "01020", "city": "CHICOPEE", "loc": [-72.576142, 42.176443], "pop": 31495, "state": "MA", "popInK": 31.495}, {"_id": "01040", "city": "HOLYOKE", "loc": [-72.626193, 42.202007], "pop": 43704, "state": "MA", "popInK": 43.704}, {"_id": "01060", "city": "FLORENCE", "loc": [-72.654245, 42.324662], "pop": 27939, "state": "MA", "popInK": 27.939}, {"_id": "01085", "city": "MONTGOMERY", "loc": [-72.754318, 42.129484], "pop": 40117, "state": "MA", "popInK": 40.117}, {"_id": "01089", "city": "WEST SPRINGFIELD", "loc": [-72.641109, 42.115066], "pop": 27537, "state": "MA", "popInK": 27.537}, {"_id": "01108", "city": "SPRINGFIELD", "loc": [-72.558432, 42.085314], "pop": 25519, "state": "MA", "popInK": 25.519}, {"_id": "01109", "city": "SPRINGFIELD", "loc": [-72.554349, 42.114455], "pop": 32635, "state": "MA", "popInK": 32.635}, {"_id": "01201", "city": "PITTSFIELD", "loc": [-73.247088, 42.453086], "pop": 50655, "state": "MA", "popInK": 50.655}, {"_id": "01420", "city": "FITCHBURG", "loc": [-71.803133, 42.579563], "pop": 41194, "state": "MA", "popInK": 41.194}]}
{ "name": "self-ordered distinct", "backends": { "mimir": "skip", "couchbase": "skip", "marklogic_json": "skip", "marklogic_xml": "skip", "postgresql": "pending", "spark_hdfs": "skip", "spark_local": "timeout" }, "data": "zips.data", "query": "select distinct city from zips order by city", "predicate": "initial", "expected": ["AARON", "AARONSBURG", "ABAC", "ABBEVILLE", "ABBOT VILLAGE", "ABBOTSFORD", "ABBOTT", "ABBOTT PARK", "ABBOTTSTOWN", "ABBYVILLE"]}
{ "name": "servlets with and without init-param (pending #465, #467)", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "data": "webapp.data", "query": "select \"servlet-name\", \"init-param\" is not null from webapp where \"init-param\" is null or \"init-param\".\"betaServer\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "servlet-name": "cofaxTools", "1": true }, { "servlet-name": "fileServlet", "1": false }, { "servlet-name": "cofaxAdmin", "1": false }]}
{ "name": "shortest city names", "backends": { "couchbase": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "largeZips.data", "query": "select distinct city from largeZips order by length(city), city limit 5", "predicate": "exactly", "expected": [{ "city": "M M" }, { "city": "RYE" }, { "city": "ABAC" }, { "city": "AIEA" }, { "city": "ALTA" }]}
{ "name": "simple distinct", "backends": { "marklogic_json": "ignoreFieldOrder", "mimir": "skip", "postgresql": "pending" }, "data": "olympics.data", "query": "select distinct discipline, event from olympics where event like \"%pursuit\"", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "discipline": "Speed skating", "event": "Team pursuit" }, { "discipline": "Biathlon", "event": "10km pursuit" }, { "discipline": "Biathlon", "event": "12.5km pursuit" }, { "discipline": "Cross Country S", "event": "5km pursuit" }, { "discipline": "Cross Country S", "event": "10km pursuit" }, { "discipline": "Cross Country S", "event": "Combined 5km + 10km pursuit" }, { "discipline": "Cross Country S", "event": "Combined 10km + 15km pursuit" } ]}
{ "name": "filter on simple JS", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "largeZips.data", "query": "select city from largeZips where length(city) < 5", "predicate": "atLeast", "ignoreResultOrder": true, "expected": ["LYNN", "TROY", "ROME", "YORK", "EDEN", "CARY", "ROME", "ROME", "M M", "ABAC"]}
{ "name": "simple $project with one renamed field and one unchanged (see #598)", "backends": { "couchbase": "ignoreFieldOrder", "mimir": "timeout", "mongodb_2_6": "ignoreFieldOrder", "mongodb_3_0": "ignoreFieldOrder", "mongodb_3_2": "ignoreFieldOrder", "mongodb_3_4": "ignoreFieldOrder", "mongodb_read_only": "ignoreFieldOrder", "postgresql": "pending" }, "data": "zips.data", "query": "select `_id` as zip, city from zips where pop = 18174", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "zip": "80301", "city": "BOULDER" }, { "zip": "92029", "city": "ESCONDIDO" }]}
{ "name": "filter field in single-element set", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select * from zips where state in (\"MA\") and pop < 10", "predicate": "exactly", "ignoreResultOrder": true, "ignoredFields": ["_id"], "ignoreFieldOrder": true, "expected": [ { "city": "CAMBRIDGE", "loc": [-71.141879, 42.364005], "pop": 0, "state": "MA" }]}
{ "name": "distinct of one field", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "olympics.data", "query": "select distinct discipline as d from olympics", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "d": "Figure skating" }, { "d": "Bobsleigh" }, { "d": "Ice Hockey" }, { "d": "Biathlon" }, { "d": "Speed skating" }, { "d": "Cross Country S" }, { "d": "Curling" }, { "d": "Nordic Combined" }, { "d": "Ski Jumping" }, { "d": "Skeleton" }, { "d": "Alpine Skiing" }, { "d": "Luge" }, { "d": "Short Track S." }, { "d": "Freestyle Ski." }, { "d": "Snowboard" }]}
{ "name": "distinct of one ordered field", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "olympics.data", "NB": "The lack of alias on this field is important, as it triggers the `select value` semantics of returning a value directly, not wrapped in a map.", "query": "select distinct discipline from olympics order by discipline", "predicate": "exactly", "expected": ["Alpine Skiing", "Biathlon", "Bobsleigh", "Cross Country S", "Curling", "Figure skating", "Freestyle Ski.", "Ice Hockey", "Luge", "Nordic Combined", "Short Track S.", "Skeleton", "Ski Jumping", "Snowboard", "Speed skating"]}
{ "name": "skip and count", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select count(*) from (select * from zips offset 10) as x", "predicate": "exactly", "ignoreResultOrder": true, "expected": [29343]}
{ "name": "sort by JS expression with filter", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select city, pop from zips where pop > 110000 order by length(city)", "predicate": "exactly", "expected": [ { "city": "CHICAGO", "pop": 112047.0 }, { "city": "BROOKLYN", "pop": 111396.0 } ]}
{ "name": "sort, project, and limit", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select city, state from zips order by city, state limit 10", "predicate": "exactly", "expected": [ { "city": "AARON", "state": "KY" }, { "city": "AARONSBURG", "state": "PA" }, { "city": "ABAC", "state": "GA" }, { "city": "ABBEVILLE", "state": "AL" }, { "city": "ABBEVILLE", "state": "GA" }, { "city": "ABBEVILLE", "state": "MS" }, { "city": "ABBEVILLE", "state": "SC" }, { "city": "ABBOT VILLAGE", "state": "ME" }, { "city": "ABBOTSFORD", "state": "WI" }, { "city": "ABBOTT", "state": "TX" }]}
{ "name": "sort wildcard on expression", "backends": { "mimir": "skip", "mongodb_2_6": "ignoreResultOrder", "mongodb_3_0": "ignoreResultOrder", "mongodb_3_2": "ignoreResultOrder", "mongodb_3_4": "ignoreResultOrder", "mongodb_read_only": "ignoreResultOrder", "postgresql": "pending" }, "data": "largeZips.data", "query": "select * from largeZips order by pop/10 desc", "predicate": "initial", "ignoreFieldOrder": true, "expected": [ {"_id": "60623", "city": "CHICAGO", "loc": [ -87.7157, 41.849015], "pop": 112047.0, "state": "IL"}, {"_id": "11226", "city": "BROOKLYN", "loc": [ -73.956985, 40.646694], "pop": 111396.0, "state": "NY"}, {"_id": "10021", "city": "NEW YORK", "loc": [ -73.958805, 40.768476], "pop": 106564.0, "state": "NY"}, {"_id": "10025", "city": "NEW YORK", "loc": [ -73.968312, 40.797466], "pop": 100027.0, "state": "NY"}, {"_id": "90201", "city": "BELL GARDENS", "loc": [-118.17205, 33.969177], "pop": 99568.0, "state": "CA"}, {"_id": "60617", "city": "CHICAGO", "loc": [ -87.556012, 41.725743], "pop": 98612.0, "state": "IL"}, {"_id": "90011", "city": "LOS ANGELES", "loc": [-118.258189, 34.007856], "pop": 96074.0, "state": "CA"}, {"_id": "60647", "city": "CHICAGO", "loc": [ -87.704322, 41.920903], "pop": 95971.0, "state": "IL"}, {"_id": "60628", "city": "CHICAGO", "loc": [ -87.624277, 41.693443], "pop": 94317.0, "state": "IL"}, {"_id": "90650", "city": "NORWALK", "loc": [-118.081767, 33.90564], "pop": 94188.0, "state": "CA"}]}
{ "name": "states sorted by the length of name of their first city, alphabetically", "backends": { "mimir": "skip", "couchbase": "pending", "postgresql": "pending" }, "description": "combines an aggregate function (min) with a function implemented in JS (length)", "data": "zips.data", "query": "select state, min(city) as first, length(min(city)) as len from zips group by state order by len, first, state limit 5", "predicate": "exactly", "expected": [{ "state": "MI" , "first": "ADA", "len": 3 }, { "state": "OK" , "first": "ADA", "len": 3 }, { "state": "GA" , "first": "ABAC", "len": 4 }, { "state": "NE" , "first": "ABIE", "len": 4 }, { "state": "WY" , "first": "ACME", "len": 4 }]}
{ "name": "convert epoch milliseconds value to timestamp", "backends": { "couchbase": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "../days.data", "query": "select day, ts, to_timestamp(epoch) as converted from `../days` where ts = to_timestamp(1408255200000) or to_timestamp(epoch) = timestamp(\"2014-08-18T07:00:00Z\")", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "day": "Sunday", "ts": { "$timestamp": "2014-08-17T06:00:00.000Z" }, "converted": { "$timestamp": "2014-08-17T06:00:00.000Z" } }, { "day": "Monday", "ts": { "$timestamp": "2014-08-18T07:00:00.000Z" }, "converted": { "$timestamp": "2014-08-18T07:00:00.000Z" } } ]}
{ "name": "filter on date part", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "../days.data", "query": "select distinct `day` from `../days` where date_part(\"dow\", ts) >= 3", "predicate": "exactly", "ignoreResultOrder": true, "expected": ["Wednesday", "Thursday", "Friday", "Saturday"]}
{ "name": "date_part with (virtually) all selectors, after conversion to JS (see #1238)", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "../slamengine_commits.data", "nb": "`doy` and `week` are missing because we currently have no JS implementation.", "query": "select date_part(\"millennium\", timestamp(commit.committer.date)) as millennium, date_part(\"century\", timestamp(commit.committer.date)) as century, date_part(\"decade\", timestamp(commit.committer.date)) as decade, date_part(\"year\", timestamp(commit.committer.date)) as year, date_part(\"quarter\", timestamp(commit.committer.date)) as quarter, date_part(\"month\", timestamp(commit.committer.date)) as month, date_part(\"day\", timestamp(commit.committer.date)) as dayOfMonth, date_part(\"dow\", timestamp(commit.committer.date)) as dayOfWeek, date_part(\"isodow\", timestamp(commit.committer.date)) as `dayOfWeek (ISO)`, date_part(\"hour\", timestamp(commit.committer.date)) as hour, date_part(\"minute\", timestamp(commit.committer.date)) as minute, date_part(\"second\", timestamp(commit.committer.date)) as second, date_part(\"milliseconds\", timestamp(commit.committer.date)) as millis, date_part(\"microseconds\", timestamp(commit.committer.date)) as micros, to_string(author.id) as id from `../slamengine_commits`", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "millennium": 3, "century": 21, "decade": 201, "year": 2015, "quarter": 1, "month": 1, "dayOfMonth": 29, "dayOfWeek": 4, "dayOfWeek (ISO)": 4, "hour": 15, "minute": 52, "second": 37, "millis": 37000, "micros": 3.7e7, "id": "33031" }]}
{ "name": "date_part, after conversion to JS (see #1238)", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending" }, "data": "../slamengine_commits.data", "query": "select date_part(\"day\", timestamp(commit.committer.date)) as dayOfMonth, to_string(author.id) as id from `../slamengine_commits`", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "dayOfMonth": 29.0, "id": "33031" } ]}
{ "name": "dow and isodow", "backends": { "marklogic_json": "ignoreFieldOrder", "mimir": "skip", "postgresql": "pending" }, "data": "../days.data", "query": "select distinct day, date_part(\"dow\", ts) as dow, date_part(\"isodow\", ts) as isodow from `../days`", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "day": "Sunday" , "dow": 0, "isodow" : 7 }, { "day": "Monday", "dow": 1, "isodow" : 1 }, { "day": "Tuesday", "dow": 2, "isodow" : 2 }, { "day": "Wednesday", "dow": 3, "isodow" : 3 }, { "day": "Thursday", "dow": 4, "isodow" : 4 }, { "day": "Friday", "dow": 5, "isodow" : 5 }, { "day": "Saturday", "dow": 6, "isodow" : 6 }]}
{ "name": "filter with date literals", "backends": { "mimir": "skip", "marklogic_json": "pending", "marklogic_xml": "pending", "postgresql": "pending" }, "data": "../days.data", "query": "select day from `../days` where ((date_trunc(\"day\", ts) > start_of_day(date(\"2014-08-17\")) and date_trunc(\"day\", ts) <= start_of_day(date(\"2014-08-20\"))) and date_trunc(\"day\", ts) != start_of_day(date(\"2014-08-19\"))) or date_trunc(\"day\", ts) = start_of_day(date(\"2014-08-22\"))", "predicate": "exactly", "ignoreResultOrder": true, "expected": ["Monday", "Wednesday", "Friday"]}
{ "name": "filter on date part, where the field isn't a timestamp", "backends": { "mimir": "skip", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "postgresql": "pending" }, "data": "../days.data", "query": "select day from `../days` where date_part(\"dow\", epoch) >= 3", "predicate": "exactly", "ignoreResultOrder": true, "expected": []}
{ "name": "filter on time_of_day", "backends": { "couchbase": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "../days.data", "query": "select day, time_of_day(ts) as tod, time_of_day(day) as notadate, time_of_day(missing) as missing from `../days` where time_of_day(ts) >= time(\"08:00\") and time_of_day(ts) < time(\"10:20:30.400\")", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "day": "Tuesday", "tod": { "$time": "08:00:00.000" } }, { "day": "Wednesday", "tod": { "$time": "09:00:00.000" } }, { "day": "Thursday", "tod": { "$time": "10:00:00.000" } }]}
{ "name": "timestamp and interval syntax", "backends": { "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "mimir": "timeout", "mongodb_read_only": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "data": "../days.data", "query": "select day, (ts - timestamp(\"2014-08-17T00:00:00.000Z\")) / interval(\"PT1H0M0S\") as hoursSinceSunday from `../days` where ts < timestamp(\"2014-08-17T12:00:00Z\") or ts - interval(\"PT12H\") > timestamp(\"2014-08-22T00:00:00Z\")", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "day": "Sunday", "hoursSinceSunday": 6.0 }, { "day": "Saturday", "hoursSinceSunday": 156.0 }, { "day": "Wednesday", "hoursSinceSunday": -391176.0002777 }, { "day": "Monday", "hoursSinceSunday": -3168958.777777 }]}
{ "name": "convert dates to/from strings", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "../days.data", "query": "select date(substring(str, 0, 10)) as d, time(substring(str, 11, 8)) as t, timestamp(str) as ts, to_string(ts) as s from `../days`", "predicate": "exactly", "ignoreResultOrder": true, "expected": [ { "d": { "$date": "2014-08-17" }, "t": { "$time": "06:00:00.000" }, "ts": { "$timestamp": "2014-08-17T06:00:00.000Z" }, "s": "2014-08-17T06:00:00.000Z" }, { "d": { "$date": "2014-08-18" }, "t": { "$time": "07:00:00.000" }, "ts": { "$timestamp": "2014-08-18T07:00:00.000Z" }, "s": "2014-08-18T07:00:00.000Z" }, { "d": { "$date": "2014-08-19" }, "t": { "$time": "08:00:00.000" }, "ts": { "$timestamp": "2014-08-19T08:00:00.000Z" }, "s": "2014-08-19T08:00:00.000Z" }, { "d": { "$date": "2014-08-20" }, "t": { "$time": "09:00:00.000" }, "ts": { "$timestamp": "2014-08-20T09:00:00.000Z" }, "s": "2014-08-20T09:00:00.000Z" }, { "d": { "$date": "2014-08-21" }, "t": { "$time": "10:00:00.000" }, "ts": { "$timestamp": "2014-08-21T10:00:00.000Z" }, "s": "2014-08-21T10:00:00.000Z" }, { "d": { "$date": "2014-08-22" }, "t": { "$time": "11:00:00.000" }, "ts": { "$timestamp": "2014-08-22T11:00:00.000Z" }, "s": "2014-08-22T11:00:00.000Z" }, { "d": { "$date": "2014-08-23" }, "t": { "$time": "12:00:00.000" }, "ts": { "$timestamp": "2014-08-23T12:00:00.000Z" }, "s": "2014-08-23T12:00:00.000Z" }, { "d": { "$date": "1969-12-31" }, "t": { "$time": "23:59:59.000" }, "ts": { "$timestamp": "1969-12-31T23:59:59.000Z" }, "s": "1969-12-31T23:59:59.000Z" }, { "d": { "$date": "1653-02-10" }, "t": { "$time": "01:13:20.000" }, "ts": { "$timestamp": "1653-02-10T01:13:20.000Z" }, "s": "1653-02-10T01:13:20.000Z" }]}
{ "name": "triple flatten with mixed content", "backends": { "mimir": "skip", "marklogic_json": "pending", "marklogic_xml": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "data": "nested.data", "query": "select topObj{*}{*}{*} from nested", "NB": "`exactly` with `ignoreResultOrder` has a bug that gets confused on duplicate results (#732).", "predicate": "exactly", "ignoreResultOrder": true, "expected": ["m", "n", "o"]}
{ "name": "simple read", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "smallZips.data", "query": "select * from smallZips", "predicate": "atLeast", "ignoreResultOrder": true, "ignoredFields": ["_id"], "ignoreFieldOrder": true, "expected": [ { "city": "NEW SALEM", "loc": [-72.306241 , 42.514643], "pop": 456, "state": "MA" } ]}
{ "name": "trivial group by", "backends": { "couchbase": "ignoreFieldOrder", "mimir": "timeout", "postgresql": "pending", "spark_hdfs": "ignoreFieldOrder", "spark_local": "ignoreFieldOrder" }, "data": "largeZips.data", "query": "select city, sum(pop) as totalPop from largeZips group by city", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "BOULDER", "totalPop": 110948 }]}
{ "name": "use type_of function", "backends": { "mimir": "skip", "couchbase": "pending", "marklogic_json": "pending", "marklogic_xml": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "data": "nested_foo.data", "query": "select foo, type_of(foo) as type from nested_foo", "predicate": "exactly", "ignoreResultOrder": true, "FIXME": "There should be three `{ }`, but they are rewritten away", "expected": [{ "foo": "zap", "type": "array" }, { "foo": [15, [{ "baz": ["quux"] }]], "type": "array" }, { "foo": ["15z", [{ "baz": ["qx"] }]], "type": "array" }, { "foo": [18, ["meh", { "baz": ["qx"] }]], "type": "array" }, { "foo": [16, [{ "baz": "mooooo" }]], "type": "array" }, { "foo": { "bar": 15, "baz": ["qx"] }, "type": "map" }, { "foo": { "bar": "a15", "baz": ["qx"] }, "type": "map" }, { "foo": [17, [{ "baz": ["qx"] }]], "type": "array" }]}
{ "name": "propagate undefined and null in JS", "backends": { "mimir": "skip", "couchbase": "pending", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "zips.data", "query": "select distinct length(meh) as meh_len, meh.mep, length(meh.mep) as mep_len from zips", "predicate": "exactly", "ignoreResultOrder": true, "FIXME": "There should be a `{ }`, but it is rewritten away", "expected": []}
{ "name": "unify flattened fields", "backends": { "mimir": "skip", "couchbase": "pending", "postgresql": "pending" }, "data": "zips.data", "query": "select loc[*] from zips where loc[*] < 0", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [-72.622739, -72.51565, -72.108354, -72.410953, -72.936114, -72.188455, -72.988761, -72.833309, -72.607962, -72.576142]}
{ "name": "unify flattened fields with multiple shape-preserving ops.", "backends": { "couchbase": "pending", "marklogic_json": "skip", "marklogic_xml": "skip", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "postgresql": "pending", "spark_hdfs": "pending", "spark_local": "pending" }, "NB": "Skipped in marklogic because it times out.", "data": "zips.data", "query": "select `_id` as zip, loc[*] from zips where loc[*] > 68 order by loc[*]", "predicate": "exactly", "expected": [{ "zip": "99722", "loc": 68.077395}, { "zip": "99721", "loc": 68.11878}, { "zip": "99766", "loc": 68.312058}, { "zip": "99759", "loc": 69.705626}, { "zip": "99747", "loc": 70.042889}, { "zip": "99734", "loc": 70.070057}, { "zip": "99789", "loc": 70.192737}, { "zip": "99782", "loc": 70.620064}, { "zip": "99723", "loc": 71.234637}]}
{ "name": "unify flattened fields with unflattened field", "backends": { "couchbase": "pending", "mimir": "timeout", "postgresql": "pending" }, "data": "zips.data", "query": "select `_id` as zip, loc[*] from zips order by loc[*] limit 10", "predicate": "exactly", "expected": [{ "zip": "99742", "loc": -171.701685}, { "zip": "99769", "loc": -170.470908}, { "zip": "99660", "loc": -170.293408}, { "zip": "99591", "loc": -169.547257}, { "zip": "99638", "loc": -168.788427}, { "zip": "99783", "loc": -168.520521}, { "zip": "99692", "loc": -167.510656}, { "zip": "99766", "loc": -166.72618}, { "zip": "99685", "loc": -166.519855}, { "zip": "99785", "loc": -166.478578}]}
{ "name": "union", "backends": { "couchbase": "pending", "mimir": "timeout", "mongodb_2_6": "pending", "mongodb_3_0": "pending", "mongodb_3_2": "pending", "mongodb_3_4": "pending", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "zips.data", "query": "select `_id` as zip from zips union select city, state from zips", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "zip": "01001" }, { "zip": "01002" }, { "zip": "01005" }, { "zip": "01007" }, { "zip": "01008" }, { "city": "AGAWAM", "state": "MA" }, { "city": "CUSHMAN", "state": "MA" }, { "city": "BARRE", "state": "MA" }, { "city": "BELCHERTOWN", "state": "MA" }, { "city": "BLANDFORD", "state": "MA" }]}
{ "name": "unshift aggregation", "NB": "Couchbase pending due to different ordering of pop array. Enable once group contents ordering is possible.", "backends": { "couchbase": "pending", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_2_6": "ignoreFieldOrder", "mongodb_3_0": "ignoreFieldOrder", "mongodb_3_2": "ignoreFieldOrder", "mongodb_3_4": "ignoreFieldOrder", "mongodb_read_only": "ignoreFieldOrder", "postgresql": "pending" }, "data": "zips.data", "query": "select state, city, [pop ...] as pop from zips group by state, city", "predicate": "atLeast", "ignoreResultOrder": true, "expected": [ { "state": "AK", "city": "ANCHORAGE", "pop": [14436, 15891, 12534, 32383, 20128, 29857, 17094, 18356, 15192, 8116] }, { "state": "AK", "city": "KETCHIKAN", "pop": [13886, 422] }, { "state": "AK", "city": "POINT BAKER", "pop": [426] } ]}
{ "name": "select from a table named by a variable", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "smallZips.data", "variables": { "table": "`smallZips`" }, "query": "select count(*) as cnt from :table where pop < 1000", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "cnt": 19 }]}
{ "name": "handle variable referenced in filter", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "mystate := \"CO\"; select * from zips where state = mystate", "ignoredFields": ["_id"], "ignoreFieldOrder": true, "predicate": "atLeast", "ignoreResultOrder": true, "expected": [{ "city": "ARVADA", "loc": [-105.098402, 39.794533], "pop": 12065, "state": "CO" }]}
{ "name": "wildcard with additional projections and filtering", "backends": { "mimir": "skip", "postgresql": "pending" }, "data": "zips.data", "query": "select *, concat(city, concat(\", \", state)) as city_state, city = \"BOULDER\" as boulderish from zips where city like \"BOULDER%\"", "predicate": "exactly", "ignoreResultOrder": true, "ignoreFieldOrder": true, "expected": [ { "_id": "80301", "city": "BOULDER", "loc": [ -105.21426, 40.049733 ], "pop": 18174.0, "state": "CO", "city_state": "BOULDER, CO", "boulderish": true }, { "_id": "80302", "city": "BOULDER", "loc": [ -105.285131, 40.017235 ], "pop": 29384.0, "state": "CO", "city_state": "BOULDER, CO", "boulderish": true }, { "_id": "80303", "city": "BOULDER", "loc": [ -105.239178, 39.991381 ], "pop": 39860.0, "state": "CO", "city_state": "BOULDER, CO", "boulderish": true }, { "_id": "80304", "city": "BOULDER", "loc": [ -105.277073, 40.037482 ], "pop": 21550.0, "state": "CO", "city_state": "BOULDER, CO", "boulderish": true }, { "_id": "59632", "city": "BOULDER", "loc": [ -112.113757, 46.230647 ], "pop": 1737.0, "state": "MT", "city_state": "BOULDER, MT", "boulderish": true }, { "_id": "84716", "city": "BOULDER", "loc": [ -111.426646, 37.916606 ], "pop": 131.0, "state": "UT", "city_state": "BOULDER, UT", "boulderish": true }, { "_id": "82923", "city": "BOULDER", "loc": [ -109.540105, 42.688146 ], "pop": 112.0, "state": "WY", "city_state": "BOULDER, WY", "boulderish": true }, { "_id": "89005", "city": "BOULDER CITY", "loc": [ -114.834413, 35.972711 ], "pop": 12920.0, "state": "NV", "city_state": "BOULDER CITY, NV", "boulderish": false }, { "_id": "95006", "city": "BOULDER CREEK", "loc": [ -122.133053, 37.149934 ], "pop": 9434.0, "state": "CA", "city_state": "BOULDER CREEK, CA", "boulderish": false }, { "_id": "54512", "city": "BOULDER JUNCTION", "loc": [ -89.632454, 46.111183 ], "pop": 563.0, "state": "WI", "city_state": "BOULDER JUNCTION, WI", "boulderish": false } ]}
{ "name": "splice a wildcard with multiple constants", "backends": { "mimir": "skip", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "largeZips.data", "query": "select *, '1' as one, '2' as two from largeZips", "predicate": "atLeast", "ignoreResultOrder": true, "ignoreFieldOrder": true, "expected": [ { "_id": "01002", "city": "CUSHMAN", "loc": [ -72.51565, 42.377017], "pop": 36963, "state": "MA", "one": "1", "two": "2" }, { "_id": "01020", "city": "CHICOPEE", "loc": [-72.576142, 42.176443], "pop": 31495, "state": "MA", "one": "1", "two": "2" }, { "_id": "01040", "city": "HOLYOKE", "loc": [-72.626193, 42.202007], "pop": 43704, "state": "MA", "one": "1", "two": "2" }, { "_id": "01060", "city": "FLORENCE", "loc": [-72.654245, 42.324662], "pop": 27939, "state": "MA", "one": "1", "two": "2" }, { "_id": "01085", "city": "MONTGOMERY", "loc": [-72.754318, 42.129484], "pop": 40117, "state": "MA", "one": "1", "two": "2" }, { "_id": "01089", "city": "WEST SPRINGFIELD", "loc": [-72.641109, 42.115066], "pop": 27537, "state": "MA", "one": "1", "two": "2" }, { "_id": "01108", "city": "SPRINGFIELD", "loc": [-72.558432, 42.085314], "pop": 25519, "state": "MA", "one": "1", "two": "2" }]}
{ "name": "wildcard with sort", "backends": { "mimir": "skip", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "zips.data", "query": "select * from zips order by pop, city limit 10", "predicate": "exactly", "ignoredFields": ["_id"], "ignoreFieldOrder": true, "expected": [ { "city": "ALGODONES", "loc": [-106.616589, 35.428527], "pop": 0, "state": "NM" }, { "city": "ALLEGHANY", "loc": [-120.727176, 39.512698], "pop": 0, "state": "CA" }, { "city": "ALLEN", "loc": [-87.66746, 31.624266], "pop": 0, "state": "AL" }, { "city": "ANN ARBOR", "loc": [-83.715363, 42.293 ], "pop": 0, "state": "MI" }, { "city": "ARNOLD", "loc": [-100.012003, 38.609122], "pop": 0, "state": "KS" }, { "city": "ATLANTA", "loc": [-84.388188, 33.74715 ], "pop": 0, "state": "GA" }, { "city": "BIG LAUREL", "loc": [-83.156468, 37.002795], "pop": 0, "state": "KY" }, { "city": "BRIDGETON", "loc": [-90.458062, 38.7561 ], "pop": 0, "state": "MO" }, { "city": "BROWDER", "loc": [-86.978197, 37.259333], "pop": 0, "state": "KY" }, { "city": "BUSTINS ISLAND", "loc": [-70.042247, 43.79602 ], "pop": 0, "state": "ME" }]}
{ "name": "count occurrences of each value of length(city), with filtering", "backends": { "couchbase": "ignoreFieldOrder", "marklogic_json": "ignoreFieldOrder", "mimir": "timeout", "mongodb_2_6": "ignoreFieldOrder", "mongodb_3_0": "ignoreFieldOrder", "mongodb_3_2": "ignoreFieldOrder", "mongodb_3_4": "ignoreFieldOrder", "mongodb_read_only": "pending", "postgresql": "pending" }, "data": "largeZips.data", "query": "select length(city) as len, count(*) as cnt from largeZips where state != \"MI\" group by length(city)", "predicate": "exactly", "ignoreResultOrder": true, "expected": [{ "len": 3, "cnt": 2 }, { "len": 4, "cnt": 65 }, { "len": 5, "cnt": 206 }, { "len": 6, "cnt": 446 }, { "len": 7, "cnt": 554 }, { "len": 8, "cnt": 482 }, { "len": 9, "cnt": 438 }, { "len": 10, "cnt": 377 }, { "len": 11, "cnt": 340 }, { "len": 12, "cnt": 215 }, { "len": 13, "cnt": 141 }, { "len": 14, "cnt": 89 }, { "len": 15, "cnt": 65 }, { "len": 16, "cnt": 122 }]}
