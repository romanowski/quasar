Chain
├─ $ReadF(db; zips)
├─ $MatchF
│  ╰─ Doc
│     ╰─ Expr($_id -> Type(Text))
├─ $ProjectF
│  ├─ Name("0" -> {
│  │       "$cond": [
│  │         {
│  │           "$and": [
│  │             { "$lte": [{ "$literal": "" }, "$_id"] },
│  │             { "$lt": ["$_id", { "$literal": {  } }] }]
│  │         },
│  │         { "$literal": true },
│  │         { "$literal": false }]
│  │     })
│  ├─ Name("src" -> "$$ROOT")
│  ╰─ ExcludeId
├─ $MatchF
│  ╰─ Doc
│     ╰─ Expr($0 -> Eq(Bool(true)))
├─ $ProjectF
│  ├─ Name("left" -> "$src")
│  ├─ Name("0" -> { "$toLower": "$src._id" })
│  ╰─ ExcludeId
├─ $LookupF(from smallZips with (this).0 = (that)._id as right)
├─ $ProjectF
│  ├─ Name("left" -> "$left")
│  ├─ Name("right" -> "$right")
│  ╰─ ExcludeId
├─ $UnwindF(DocField(BsonField.Name("right")))
╰─ $ProjectF
   ├─ Name("city" -> "$left.city")
   ├─ Name("state" -> "$right.state")
   ╰─ ExcludeId